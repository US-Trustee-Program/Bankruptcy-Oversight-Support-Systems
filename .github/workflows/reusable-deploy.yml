name: Azure Deployment - Infrastructure

on:
  workflow_call:
    inputs:
      ghaEnvironment:
        required: true
        type: string
      azResourceGrpAppEncrypted:
        required: true
        type: string
      azResourceGrpNetworkEncrypted:
        required: true
        type: string
      stackName:
        required: true
        type: string
      environmentHash:
        required: true
        type: string
      execVnetDeploy:
        required: true
        type: string
      slotDeploymentEnabled:
        required: true
        type: string
      deployBranch:
        default: "false"
        type: string
      deployBicep:
        required: true
        type: string

jobs:
  deploy-azure-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ghaEnvironment }}
    steps:
      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ inputs.azResourceGrpAppEncrypted }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ inputs.azResourceGrpNetworkEncrypted }}

      - name: Create Azure resource groups
        id: azure-resource-group
        if: inputs.deployBicep == 'true'
        run: |
          ./ops/scripts/pipeline/azure-deploy-rg.sh \
            --show-what-if \
            --file ./ops/cloud-deployment/lib/subscription/ustp-cams-rg.bicep \
            --parameters 'databaseResourceGroupName=${{ secrets.AZURE_RG }} networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} webappResourceGroupName=${{ steps.rgApp.outputs.out }} azSubscription=${{ secrets.AZURE_SUBSCRIPTION }} branchName=${{ github.ref_name }} branchHashId=${{ inputs.environmentHash }} isBranchDeployment=${{ inputs.deployBranch }}' \
            -l ${{ secrets.AZ_LOCATION }}

      - name: Deploy Azure resources
        id: azure-deploy
        if: inputs.deployBicep == 'true'
        run: |
          ./ops/scripts/pipeline/azure-deploy.sh \
            --show-what-if \
            --resource-group ${{ steps.rgApp.outputs.out }} \
            --file ./ops/cloud-deployment/main.bicep \
            --appName ${{ inputs.stackName }} \
            --parameters 'deployVnet=${{ inputs.execVnetDeploy }} networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} virtualNetworkName=${{ vars.AZ_NETWORK_VNET_NAME }} deployWebapp=${{ inputs.slotDeploymentEnabled == 'false' }} appResourceGroup=${{ steps.rgApp.outputs.out }} deployFunctions=${{ inputs.slotDeploymentEnabled == 'false' }} sqlServerName=${{ secrets.AZ_SQL_SERVER_NAME }} sqlServerResourceGroupName=${{ secrets.AZURE_RG }} sqlServerIdentityName=${{ secrets.AZ_SQL_IDENTITY_NAME }} webappPlanType=${{ vars.AZ_PLAN_TYPE }} apiPlanType=${{ vars.AZ_PLAN_TYPE }} deployAppInsights=true analyticsWorkspaceId=${{ secrets.AZ_ANALYTICS_WORKSPACE_ID }} actionGroupName=${{ secrets.AZ_ACTION_GROUP_NAME }} createAlerts=${{ inputs.ghaEnvironment != 'Main-Gov' }} camsReactSelectHash=${{ secrets.CAMS_REACT_SELECT_HASH }} ustpIssueCollectorHash=${{ secrets.USTP_ISSUE_COLLECTOR_HASH }} idKeyvaultAppConfiguration=${{ secrets.AZ_KV_APP_CONFIG_MANAGED_ID }} cosmosIdentityName=${{secrets.AZ_COSMOS_ID_NAME }}'
