name: DAST Scan

on:
  workflow_call:
    inputs:
      apiFunctionName:
        required: true
        type: string
      slotName:
        required: true
        type: string
      webappName:
        required: true
        type: string
      stackName:
        required: true
        type: string
      azResourceGrpAppEncrypted:
        required: true
        type: string
      ghaEnvironment:
        required: true
        type: string
      branchHashId:
        required: true
        type: string
      e2eCosmosDbExists:
        required: true
        type: string

jobs:
  zap-dast-scan:
    environment: ${{ inputs.ghaEnvironment }}
    runs-on: ubuntu-latest
    env:
      priority: 201
    steps:
      - name: Get source code
        uses: actions/checkout@v3

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ inputs.azResourceGrpAppEncrypted }}

      - name: Enable GHA runner access
        run: |
          ./ops/scripts/pipeline/dev-add-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ inputs.stackName }} \
          -p ${{ env.priority }} \
          --slot-name ${{ inputs.slotName }} \
          --is-cicd

          ./ops/scripts/pipeline/dev-add-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ inputs.stackName }} \
          -p ${{ env.priority }} \
          --is-cicd

          ./ops/scripts/pipeline/add-sql-firewall-rule.sh \
          -g ${{ secrets.AZURE_RG }} \
          --stack-name ${{ inputs.stackName }} \
          --server-name ${{ secrets.AZ_SQL_SERVER_NAME }}

      - name: Prepare ZAP Context File
        env:
          # BASE_URL: "https://${{ inputs.webappName }}-${{ inputs.slotName }}.azurewebsites.us"
          BASE_URL: "https://ustp-cams-webapp.azurewebsites.us/"
          OKTA_USERNAME: "${{ secrets.OKTA_USER_NAME }}"
          OKTA_PASSWORD: "${{ secrets.OKTA_PASSWORD }}"
        run: pushd test/dast && ./merge.sh && popd

      - name: Run ZAP DAST Full Scan
        id: zap_scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: https://${{ inputs.webappName }}-${{ inputs.slotName }}.azurewebsites.us
          cmd_options: >-
            -a
            -j
            -c test/dast/config/cams-ui.context
            -z "-config script.scripts.okta-auth.enabled=true"
            -z "-config script.scripts.okta-auth.engine=Oracle Nashorn"
            -z "-config script.scripts.okta-auth.type=authentication"
            -z "-config script.scripts.okta-auth.file=/test/dast/config/okta-auth.zst"
            -z "-config ajaxSpider.browserId=chrome-headless"
            -z "-config ajaxSpider.clickDefaultElems=true"
            -z "-config ajaxSpider.clickElemsOnce=true"
            -z "-config ajaxSpider.eventWait=5000"
            -z "-config ajaxSpider.maxCrawlDepth=10"
            -z "-config ajaxSpider.maxDuration=60"
            -z "-config ajaxSpider.numberOfBrowsers=1"
            -z "-config ajaxSpider.randomInputs=true"
          rules_file_name: 'test/dast/config/dast-rules.tsv'
          fail_action: 'false'
          allow_issue_writing: 'false'
          artifact_name: 'zap-report'

      - name: Disable GHA runner access
        if: always()
        run: |
          name="gha-${{ env.priority }}-${{ inputs.stackName }}"
          ./ops/scripts/pipeline/dev-rm-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ inputs.stackName }} \
          -r ${name:0:32} \
          --slot-name ${{ inputs.slotName }}

          name="gha-${{ env.priority }}-${{ inputs.stackName }}"
          ./ops/scripts/pipeline/dev-rm-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ inputs.stackName }} \
          -r ${name:0:32}

          ./ops/scripts/pipeline/add-sql-firewall-rule.sh \
          -g ${{ secrets.AZURE_RG }} \
          --stack-name ${{ inputs.stackName }} \
          --server-name ${{ secrets.AZ_SQL_SERVER_NAME }} \
          --delete
