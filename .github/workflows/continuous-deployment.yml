name: Continuous Deployment

concurrency: ${{ github.ref }}-${{ github.workflow }}

on: [push]

jobs:
  build-info:
    runs-on: ubuntu-latest
    environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
    outputs:
      environment: ${{ vars.ENVIRONMENT }}
      stackName: ${{ steps.build-info.outputs.stackName }}
      webappName: ${{ steps.build-info.outputs.webappName }}
      apiName: ${{ steps.build-info.outputs.apiName }}
      execVnetDeploy: ${{ steps.build-info.outputs.execVnetDeploy }}
      azResourceGrpAppEncrypted: ${{ steps.rgApp.outputs.out }}
      azResourceGrpNetworkEncrypted: ${{ steps.rgNetwork.outputs.out }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check environment
        id: check-env
        if: ${{ vars.ENVIRONMENT != 'Main-Gov' }} # Generate deterministic hash to append to resource group names
        run: |
          hash=$(echo -n ${{ github.ref_name }} | openssl sha256 | awk '{print $2}')
          shortHash="-${hash:0:6}"
          echo "resourceGroupSuffix=${shortHash}" >> $GITHUB_OUTPUT

      - name: Print build info
        id: build-info
        run: |
          echo "Printing build info"
          echo "Azure Plan Type: ${{ vars.AZ_PLAN_TYPE }}"
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Target Azure Cloud: ${{ vars.AZURE_ENVIRONMENT }}"
          echo "Git SHA: ${{ github.sha }}"

          # Generate resource group name(s)
          resourceGroupSuffix=${{ steps.check-env.outputs.resourceGroupSuffix || '' }}
          echo "Resource group appended with the following: ${resourceGroupSuffix}"
          echo "azResourceGrpApp=${{ secrets.AZ_APP_RG }}${resourceGroupSuffix}" >> $GITHUB_OUTPUT
          echo "azResourceGrpNetwork=${{ secrets.AZ_NETWORK_RG }}${resourceGroupSuffix}" >> $GITHUB_OUTPUT

          # Stack name used downstream to label build artifacts and Azure resources
          stackName=$(ops/helper-scripts/generate-stackname.sh ${{ vars.ENVIRONMENT }} ${{ vars.APP_NAME }} ${{ vars.DEV_SUFFIX }} ${{ github.ref_name }})
          echo "Stack Name: $stackName"
          echo "stackName=${stackName}" >> $GITHUB_OUTPUT

          # Expected build artifact naming
          webappName="${stackName}-webapp"
          echo "Webapp Artifact: $webappName"
          echo "webappName=${webappName}" >> $GITHUB_OUTPUT
          apiName="${stackName}-node-api"
          echo "Api Artifact: $apiName"
          echo "apiName=${apiName}" >> $GITHUB_OUTPUT

          # Set to true to attempt to create a new virtual network
          execVnetDeploy=${{ inputs.deployVnet || 'true' }}
          echo "Execute virtual network deployment: ${execVnetDeploy}"
          echo "execVnetDeploy=${execVnetDeploy}" >> $GITHUB_OUTPUT

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.build-info.outputs.azResourceGrpApp }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.build-info.outputs.azResourceGrpNetwork }}

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--skip-sorting-imports --replace"

  accessibility-test:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Install chrome
        uses: browser-actions/setup-chrome@v1

      - name: Get source code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Install Node dependencies
        run: npm ci && npm install -g pa11y-ci

      - name: Run pa11y Test
        run: ../ops/helper-scripts/accessibility-test.sh

  security-sast-scan:
    if: ${{ false }}
    runs-on: ubuntu-latest
    needs: [ build-info ]
    environment: ${{ needs.build-info.outputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: Package source code for scan
        run: zip -r cams.zip . -i "./backend/*" -i "./user-interface/*"

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - name: Download baseline file
        run: az storage blob download --account-name ${{ secrets.az_stor_veracode_name }} --account-key ${{ secrets.az_stor_veracode_key }} -c baseline -n results-latest.json -f ./results-latest.json

      - name: pipeline-scan
        id: pipeline-scan
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar --version

          java -jar pipeline-scan.jar \
          -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} \
          -bf results-latest.json -jf results.json -fjf filtered_results.json \
          --file cams.zip

      - name: Upload to storage account
        if: always()
        run: |
          az storage blob upload --account-name ${{ secrets.az_stor_veracode_name }} --account-key ${{ secrets.az_stor_veracode_key }} -f results.json -c results -n results-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.ref_name }}.json
          az storage blob upload --account-name ${{ secrets.az_stor_veracode_name }} --account-key ${{ secrets.az_stor_veracode_key }} -f filtered_results.json -c results -n filtered_results-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.ref_name }}.json

  security-sca-scan-frontend:
    if: ${{ false }}
    runs-on: ubuntu-latest
    name: Scan repository frontend with Veracode SCA

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Veracode SCA for frontend
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
          SRCCLR_REGION: ${{ secrets.SRCCLR_REGION }}
        uses: veracode/veracode-sca@v2.1.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          path: user-interface/

  security-sca-scan-backend:
    if: ${{ false }}
    runs-on: ubuntu-latest
    name: Scan repository backend with Veracode SCA

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Veracode SCA for backend
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
          SRCCLR_REGION: ${{ secrets.SRCCLR_REGION }}
        uses: veracode/veracode-sca@v2.1.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          path: backend/functions/

  build-frontend:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest
    needs: [ build-info ]
    environment: ${{ needs.build-info.outputs.environment }}

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Execute Build
        run: |
          npm ci
          export REACT_APP_SERVER_HOSTNAME="${{ needs.build-info.outputs.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}"
          export REACT_APP_SERVER_PORT=${{ vars.REACT_APP_SERVER_PORT }}
          export REACT_APP_SERVER_PROTOCOL=${{ vars.REACT_APP_SERVER_PROTOCOL }}
          export REACT_APP_BASE_PATH=${{ vars.REACT_APP_BASE_PATH }}
          npm run build --if-present

      - name: Execute Test
        run: CI=true npm test

      - name: Package
        run: |
          mkdir artifacts
          tar -cvf artifacts/${{ needs.build-info.outputs.webappName }}.tar ./build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.webappName }}-build
          path: user-interface/artifacts/
          if-no-files-found: error

  build-service:
    defaults:
      run:
        working-directory: backend/functions

    runs-on: ubuntu-latest
    needs: [ build-info ]
    environment: ${{ needs.build-info.outputs.environment }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Execute Build
        run: |
          npm ci
          npm run build

      - name: Execute Tests
        run: npm run test

      - name: Package Application
        run: OUT=${{ needs.build-info.outputs.apiName }} npm run pack

      - name: Upload Node Azure Functions Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.apiName }}-build
          path: backend/functions/${{ needs.build-info.outputs.apiName }}.zip
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: [build-info, build-frontend, build-service, accessibility-test]
    environment: ${{ needs.build-info.outputs.environment }}
    if: ((github.ref == 'refs/heads/main') || inputs.deployBranch || true)
    outputs:
      cosmosDbManagedIdentity: ${{ steps.azure-db-deploy.outputs.cosmosDbManagedIdentity }}

    steps:
      - run: echo "Current git reference ${{ github.ref_name }}"

      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpNetworkEncrypted }}

      - name: Create Azure resource groups
        id: azure-resource-group
        run: |
          ./ops/helper-scripts/azure-deploy-rg.sh \
            --show-what-if \
            --file ./ops/cloud-deployment/subscription/ustp-cams-rg.bicep \
            --parameters 'databaseResourceGroupName=${{ secrets.AZURE_RG }} networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} webappResourceGroupName=${{ steps.rgApp.outputs.out }} azSubscription=${{ secrets.AZURE_SUBSCRIPTION }}' -l ${{ secrets.AZ_LOCATION }}

      - name: Deploy Azure resources
        id: azure-deploy
        run: |
          ./ops/helper-scripts/azure-deploy.sh \
            --show-what-if \
            --resource-group ${{ steps.rgApp.outputs.out }} \
            --file ./ops/cloud-deployment/ustp-cams.bicep \
            --parameters 'appName=${{ needs.build-info.outputs.stackName }} deployVnet=${{ needs.build-info.outputs.execVnetDeploy }} deployNetwork=true networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} virtualNetworkName=${{ vars.AZ_NETWORK_VNET_NAME }} deployWebapp=true webappResourceGroupName=${{ steps.rgApp.outputs.out }} deployFunctions=true apiFunctionsResourceGroupName=${{ steps.rgApp.outputs.out }} sqlServerName=${{ secrets.AZ_SQL_SERVER_NAME }} sqlServerResourceGroupName=${{ secrets.AZURE_RG }} webappPlanType=${{ vars.AZ_PLAN_TYPE }} apiPlanType=${{ vars.AZ_PLAN_TYPE }} privateDnsZoneName=${{ vars.AZ_PRIVATE_DNS_ZONE }} pacerKeyVaultIdentityName=${{ secrets.PACER_KEYVAULT_IDENTITY }} pacerKeyVaultIdentityResourceGroupName=${{ secrets.AZURE_RG }}'

          cosmosDbVnet=$(cat ./outputs.json | jq -r .vnetName.value)
          echo "cosmosDbVNet=${cosmosDbVnet}" >> $GITHUB_OUTPUT

          cosmosDbSnet=$(cat ./outputs.json | jq -r .cosmosDbAllowedSubnet.value)
          echo "cosmosDbSnet=${cosmosDbSnet}" >> $GITHUB_OUTPUT

      - name: Deploy database
        id: azure-db-deploy
        run: |
          az deployment group create \
            -g ${{ secrets.AZURE_RG }} \
            -f ./ops/cloud-deployment/ustp-cams-cosmos.bicep \
            --parameter resourceGroupName=${{ secrets.AZURE_RG }} accountName=${{ secrets.AZ_COSMOS_ACCOUNT_NAME }} databaseName=${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
            -o json --query properties.outputs | tee outputs.json

          cosmosDbManagedIdentity=$(cat ./outputs.json | jq -r .cosmosDbManagedIdentity.value)
          echo "cosmosDbManagedIdentity=${cosmosDbManagedIdentity}" >> $GITHUB_OUTPUT

          ./ops/helper-scripts/az-cosmos-add-vnet-rule.sh \
            --networkResourceGroup ${{ steps.rgNetwork.outputs.out }} \
            --vnetName ${{ steps.azure-deploy.outputs.cosmosDbVnet }} \
            --subnetName ${{ steps.azure-deploy.outputs.cosmosDbSnet }} \
            --databaseResourceGroup ${{ secrets.AZURE_RG }} \
            --accountName ${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: [build-info, deploy]
    environment: ${{ needs.build-info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp
        run: ./ops/helper-scripts/az-app-deploy.sh --src ./${{ needs.build-info.outputs.webappName }}.tar -g ${{ steps.rgApp.outputs.out }} -n ${{ needs.build-info.outputs.webappName }}

  deploy-service:
    runs-on: ubuntu-latest
    needs: [build-info, deploy]
    environment: ${{ needs.build-info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy Azure Functions backend
        run: |
          ./ops/helper-scripts/az-func-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.build-info.outputs.apiName }} \
          --src ./${{ needs.build-info.outputs.apiName }}.zip \
          --settings "MSSQL_HOST=${{ secrets.AZ_MSSQL_HOST }} \
          MSSQL_DATABASE=${{ secrets.AZ_MSSQL_DATABASE }} \
          MSSQL_USER=${{ secrets.AZ_MSSQL_USER }} \
          MSSQL_PASS=${{ secrets.AZ_MSSQL_PASS }} \
          MSSQL_ENCRYPT=${{ secrets.AZ_MSSQL_ENCRYPT }} \
          MSSQL_TRUST_UNSIGNED_CERT=${{ secrets.AZ_MSSQL_TRUST_UNSIGNED_CERT }} \
          PACER_TOKEN_URL=${{ vars.PACER_TOKEN_URL }} \
          PACER_CASE_LOCATOR_URL=${{ vars.PACER_CASE_LOCATOR_URL }} \
          AZURE_KEY_VAULT_URL=${{ secrets.AZURE_KEY_VAULT_URL }} \
          PACER_TOKEN_SECRET_NAME=${{ secrets.PACER_TOKEN_SECRET_NAME }} \
          PACER_USER_ID_SECRET_NAME=${{ secrets.PACER_USER_ID_SECRET_NAME }} \
          PACER_PASSWORD_SECRET_NAME=${{ secrets.PACER_PASSWORD_SECRET_NAME }} \
          STARTING_MONTH=${{ vars.STARTING_MONTH }} \
          COSMOS_ENDPOINT=https://${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}.documents.azure.us:443/ \
          COSMOS_DATABASE_NAME=${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
          COSMOS_MANAGED_IDENTITY=${{ needs.deploy.outputs.cosmosDbManagedIdentity }}" \
          --identities "${{ needs.deploy.outputs.cosmosDbManagedIdentity }}" \
          --identitiesResourceGroup ${{ secrets.AZURE_RG }}

  integration-test:
    defaults:
      run:
        working-directory: backend/functions

    runs-on: ubuntu-latest
    needs: [build-info, deploy-webapp, deploy-service]
    environment: ${{ needs.build-info.outputs.environment }}
    env:
      stackName: ${{ needs.build-info.outputs.stackName }}
      apiName: ${{ needs.build-info.outputs.apiName }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Install
        run: npm ci

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - name: Enable GHA runner access
        run: ../../ops/helper-scripts/dev-add-allowed-ip.sh -g ${{ steps.rgApp.outputs.out }} -s ${{ env.stackName }} -p 100 --is-cicd

      - name: Execute Integration Tests
        run: |
          export CASES_FUNCTION_URL="https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api"
          npm run test:integration

      - name: Disable GHA runner access
        if: always()
        run: |
          name="gha-agent-${{ env.stackName }}"
          ../../ops/helper-scripts/dev-rm-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ env.stackName }} ${name:0:32}

  smoke-test-application:
    runs-on: ubuntu-latest
    needs: [build-info, deploy-webapp, deploy-service]
    environment: ${{ needs.build-info.outputs.environment }}
    env:
      stackName: ${{ needs.build-info.outputs.stackName }}
      webappName: ${{ needs.build-info.outputs.webappName }}
      apiName: ${{ needs.build-info.outputs.apiName }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}
      - name: Enable GHA runner access
        run: ops/helper-scripts/dev-add-allowed-ip.sh -g ${{ steps.rgApp.outputs.out }} -s ${{ env.stackName }} -p 100 --is-cicd
      - name: Health check api
        run: |
          sleep 5
          webStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" https://${{ env.webappName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }})
          sleep 5
          apiStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api/healthcheck)

          if [[ $webStatusCode = "200" && $apiStatusCode = "200" ]]; then
            exit 0
          else
            echo "Health check error. Response codes webStatusCode=$webStatusCode apiStatusCode=$apiStatusCode"
            exit 1
          fi
      - name: Disable GHA runner access
        if: always()
        run: |
          name="gha-agent-${{ env.stackName }}"
          ops/helper-scripts/dev-rm-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ env.stackName }} ${name:0:32}

  enable-access:
    runs-on: ubuntu-latest
    needs: [build-info, smoke-test-application]
    environment: ${{ needs.build-info.outputs.environment }}
    env:
      webappName: ${{ needs.build-info.outputs.webappName }}
      apiName: ${{ needs.build-info.outputs.apiName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}
      - name: Enable access
        run: |
          az webapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
          az functionapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
