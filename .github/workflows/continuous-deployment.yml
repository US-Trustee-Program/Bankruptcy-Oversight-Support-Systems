name: Continuous Deployment

on: [push]

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--skip-sorting-imports --replace"

  build-frontend:
    defaults:
      run:
        working-directory: gui

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: gui/package-lock.json

      - run: npm ci
      - run: |
          export REACT_APP_SERVER_HOSTNAME=${{ vars.REACT_APP_SERVER_HOSTNAME }}
          export REACT_APP_SERVER_PORT=${{ vars.REACT_APP_SERVER_PORT }}
          export REACT_APP_SERVER_PROTOCOL=${{ vars.REACT_APP_SERVER_PROTOCOL }}
          npm run build --if-present
      - run: CI=true npm test

      - name: Archive the frontend build directory
        id: archive
        run: |
          mkdir artifacts
          tar -cvf artifacts/ustp-boss.tar ./build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ustp-boss
          path: gui/artifacts/
          if-no-files-found: error

  build-backend:
    defaults:
      run:
        working-directory: api/node

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: api/node/package-lock.json

      - run: npm ci
      - run: CI=true npm test

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          login-server: ustpbossregistry.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_TOKEN }}

      - name: Build API Container and Publish to Registry
        run: az acr build -f Dockerfile -t ${{ secrets.ACR_REGISTRY }}/ustp-boss-api-node -r ${{ secrets.ACR_REGISTRY }} .

  build-functions-backend:
    defaults:
      run:
        working-directory: functions/java

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
      - run: ./gradlew azureFunctionsPackageZip

      - name: Upload Java Azure Functions Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ustp-boss-java-function
          path: functions/java/build/azure-functions/ustp-boss-java-function.zip
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-functions-backend]
    #if: github.ref == 'refs/heads/main' # TODO : This is for testing deployment on the branch
    steps:

      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check for existing virtual network resource
        id: check-vnet-resource
        run: |
          count=$(az network vnet list -g ustp-network-rg --query "length([?name=='${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-vnet'])")
          if [[ $count -eq 0 ]]; then
            echo "createVnet=true" >> "$GITHUB_OUTPUT"
          else
            echo "createVnet=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Init Virtual Network
        uses: azure/arm-deploy@v1
        id: vnet-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_NETWORK_RG }}
          template: ./ops/bicep/vnet-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} createVnet=${{ steps.check-vnet-resource.outputs.createVnet }}'

      - name: Run Network Bicep deploy
        uses: azure/arm-deploy@v1
        id: network-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_NETWORK_RG }}
          template: ./ops/bicep/network-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} virtualNetworkName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-vnet'

      - name: Run Webapp Bicep deploy
        uses: azure/arm-deploy@v1
        id: azure-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/azure-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} webappSubnetId=${{ steps.network-deploy.outputs.outWebappSubnetId }}'

      - name: Provision Azure Functions backend
        uses: azure/arm-deploy@v1
        id: functions-java-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/functions-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} functionsRuntime=java functionsVersion=~4 backendFuncSubnetId=${{ steps.network-deploy.outputs.outBackendFuncSubnetId }}'

      # TODO : Need to revisit if this is needed
      # - name: Run KeyVault Bicep deploy
      #   uses: azure/arm-deploy@v1
      #   id: keyvault-deploy
      #   with:
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
      #     resourceGroupName: ${{ secrets.AZ_APP_RG }}
      #     template: ./ops/bicep/keyvault-deploy.bicep
      #     parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} readerGuid=${{ secrets.KEYVAULT_READER_ROLE_GUID }}'

      - name: Provision API Application Gateway
        uses: azure/arm-deploy@v1
        id: api-agw-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/appgateway-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} agwPrivateIP=${{ vars.REACT_APP_SERVER_HOSTNAME }} apiAgwSubnetId=${{ steps.network-deploy.outputs.outAgwSubnetId }}'

      - name: Provision Webapp Private Endpoint
        uses: azure/arm-deploy@v1
        id: webapp-private-endpoint-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/private-endpoint-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} webApplicationId=${{ steps.azure-deploy.outputs.outWebappId }} webappPrivateEndpointSubnetId=${{ steps.network-deploy.outputs.outWebappPrivateEndpointSubnetId }} virtualNetworkId=${{ steps.network-deploy.outputs.outVnetId }} functionsPrivateEndpointSubnetId=${{ steps.network-deploy.outputs.outBackendFuncPrivateEndpointSubnetId }} functionsAppId=${{ steps.functions-java-deploy.outputs.outFunctionAppId }}'

      # Below are some additional configurations post bicep
      - name: Set Azure Functions app settings
        run: |
          az functionapp config appsettings set \
            --name ${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-function-app \
            --resource-group ${{ secrets.AZ_APP_RG }} \
            --settings "${{ secrets.AZ_SQL_CONN_STR }}"

          az functionapp cors add \
            -g ${{ secrets.AZ_APP_RG }} \
            -n ${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-function-app \
            --allowed-origins https://${{ steps.azure-deploy.outputs.outWebappUrl }}
            
      - name: Run Post Bicep configurations
        run: |
          backendSubnetId=${{ steps.network-deploy.outputs.outBackendSubnetId }}
          count=$(az sql server vnet-rule list -g ${{ secrets.AZURE_RG }} --server ${{ secrets.AZ_SQL_SERVER_NAME }} -o json --query "length([?virtualNetworkSubnetId=='${backendSubnetId}'])")
          echo "Subnet match count ${count}"
          if [[ $count -eq 0 ]]; then
            echo "Creating new vnet-rule"
            az sql server vnet-rule create -s ${{ secrets.AZ_SQL_SERVER_NAME }} -n ${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-vnet-rule -g ${{ secrets.AZURE_RG }} --subnet ${backendSubnetId}
          fi

    # deploy-services: # TODO : Create a separate job to retrieve build artifacts and deploy services
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ustp-boss

      - name: Unarchive the build
        run: |
          tar -xf ustp-boss.tar

      - name: Deploy to Azure WebApp
        run: |
          cd build
          echo "Contents of build folder:"
          ls

          az resource update -g ${{ secrets.AZ_APP_RG }} -n ${{ steps.azure-deploy.outputs.outWebappName }} --resource-type "Microsoft.Web/sites" --set properties.publicNetworkAccess=Enabled
          az webapp up --html -n ${{ steps.azure-deploy.outputs.outWebappName }}
          az resource update -g ${{ secrets.AZ_APP_RG }} -n ${{ steps.azure-deploy.outputs.outWebappName }} --resource-type "Microsoft.Web/sites" --set properties.publicNetworkAccess=Disabled

      - name: Deploy Node API to Azure
        run: |
          webappName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}
          count=$(az container list --query "length([?name=='${webappName}-api'])")
          apiIpAddress=
          if [[ $count -eq 0 ]]; then
            apiIpAddress=$(az container create \
              --os-type Linux \
              --resource-group ${{ secrets.AZ_APP_RG }} \
              --name ${webappName}-api \
              --image ${{ secrets.ACR_REGISTRY }}/ustp-boss-api-node:latest \
              --ports 8080 \
              --vnet ${{ steps.network-deploy.outputs.outVnetId }} \
              --subnet ${{ steps.network-deploy.outputs.outBackendSubnetId }} \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_TOKEN }} \
              --query ipAddress.ip \
              --secure-environment-variables 'MSSQL_HOST'='${{ secrets.AZ_MSSQL_HOST }}' 'MSSQL_DATABASE'='${{ secrets.AZ_MSSQL_DATABASE }}' 'MSSQL_USER'='${{ secrets.AZ_MSSQL_USER }}' 'MSSQL_ENCRYPT'='${{ secrets.AZ_MSSQL_ENCRYPT }}' 'MSSQL_TRUST_UNSIGNED_CERT'='${{ secrets.AZ_MSSQL_TRUST_UNSIGNED_CERT }}' 'MSSQL_PASS'='${{ secrets.AZ_MSSQL_PASS }}' \
              --output tsv)
          else
            echo "Restarting existing container group"
            az container restart --name ${webappName}-api -g ${{ secrets.AZ_APP_RG }}
            apiIpAddress=$(az container show -n ${webappName}-api -g ${{ secrets.AZ_APP_RG }} --query ipAddress.ip -o tsv)
          fi

          echo "Adding ips to backend pool: ${apiIpAddress}"
          az network application-gateway address-pool update \
            --resource-group ${{ secrets.AZ_APP_RG }} \
            --gateway-name ${webappName}-api-agw \
            --name ${webappName}-api-agw-https-backend-targets \
            --servers ${apiIpAddress}

      - name: Fetch Azure Functions build artifact
        uses: actions/download-artifact@v3
        with:
          name: ustp-boss-java-function

      - name: Deploy Azure Functions backend
        run: |
          az functionapp deployment source config-zip \
            -g ${{ secrets.AZ_APP_RG }} \
            -n ${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-function-app \
            --src ./ustp-boss-java-function.zip
