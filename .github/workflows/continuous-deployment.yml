name: Continuous Deployment

concurrency: ${{ github.ref }}-${{ github.workflow }}

on:
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "**/*.md"
    branches-ignore:
      - "mob/**"
  workflow_dispatch:
    inputs:
      deployBranch:
        description: "Provision Azure resources for development branch and deploy build."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      deployVnet:
        description: "Enable Vnet creation"
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      enableSlotDeployment:
        description:
          "False for full deployment of Azure resources. True will deploy to existing environment
          with Slots resources."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      enableBicepDeployment:
        description:
          "Default: false will not deploy bicep changes unless there are changes to the bicep. True
          will deploy bicep to Azure."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  setup:
    name: Setup
    uses: ./.github/workflows/reusable-build-info.yml
    secrets: inherit # pragma: allowlist secret
    with:
      environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
      enableSlotDeployment: ${{ inputs.enableSlotDeployment }}
      enableBicepDeployment: ${{ inputs.enableBicepDeployment }}
      deployVnet: ${{ inputs.deployVnet }}

  accessibility-test:
    if: false # TODO CAMS-237 SKIP FOR Development purposes
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest

    steps:
      - name: Install chrome
        uses: browser-actions/setup-chrome@v1

      - name: Get source code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Install Node dependencies
        run: |
          pushd ../common
          npm ci
          popd

          npm ci && npm install -g pa11y-ci

      - name: Run pa11y Test
        run: ../ops/scripts/pipeline/accessibility-test.sh
  frontend:
    uses: ./.github/workflows/reusable-unit-test.yml
    with:
      path: user-interface
      node-version: ${{ vars.NODE_VERSION }}

  backend:
    uses: ./.github/workflows/reusable-unit-test.yml
    with:
      path: backend/functions
      node-version: ${{ vars.NODE_VERSION }}

  common:
    uses: ./.github/workflows/reusable-unit-test.yml
    with:
      path: common
      node-version: ${{ vars.NODE_VERSION }}

  security-scan:
    name: Security
    uses: ./.github/workflows/sub-security-scan.yml
    if: false # TODO CAMS-237 SKIP FOR Development purposes
    secrets: inherit # pragma: allowlist secret

  build:
    name: Build
    needs: [setup]
    uses: ./.github/workflows/sub-build.yml
    secrets: inherit # pragma: allowlist secret
    with:
      nodeVersion: ${{ vars.NODE_VERSION }}
      apiName: ${{ needs.setup.outputs.apiName }}
      camsServerHostname: ${{ needs.setup.outputs.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}
      camsServerPort: ${{ vars.CAMS_SERVER_PORT }}
      camsServerProtocol: ${{ vars.CAMS_SERVER_PROTOCOL }}
      camsBasePath: ${{ vars.CAMS_BASE_PATH }}
      webappName: ${{ needs.setup.outputs.webappName }}
      environment: ${{ needs.setup.outputs.ghaEnvironment }}

  deploy:
    uses: ./.github/workflows/sub-deploy.yml
    # needs: [setup, build, accessibility-test, security-scan, validation] // TODO CAMS-237 Skip some validation jobs
    needs: [setup, build]
    if: ((github.ref == 'refs/heads/main') || (inputs.deployBranch == 'true'))
    with:
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      azResourceGrpNetworkEncrypted: ${{ needs.setup.outputs.azResourceGrpNetworkEncrypted }}
      stackName: ${{ needs.setup.outputs.stackName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      webAppName: ${{ needs.setup.outputs.webappName }}
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
      execVnetDeploy: ${{ needs.setup.outputs.execVnetDeploy }}
      slotName: ${{ needs.setup.outputs.slotName }}
      slotDeploymentEnabled: ${{ needs.setup.outputs.slotDeploymentEnabled }}
      deployBranch: ${{ inputs.deployBranch }}
      deployBicep: ${{ needs.setup.outputs.deployBicep }}
    secrets: inherit # pragma: allowlist secret

  enable-access:
    runs-on: ubuntu-latest
    needs: [setup, smoke-test-application]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      webappName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Enable production slot access
        run: |
          az webapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
          az functionapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
      - name: Enable staging slot access
        if: ${{ needs.setup.outputs.slotDeploymentEnabled == 'true' }}
        run: |
          az webapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --slot ${{ needs.setup.outputs.slotName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
          az functionapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --slot ${{ needs.setup.outputs.slotName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'false'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp
        id: deploy-webapp-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/az-app-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }}

      - name: Retry Deploy to Azure WebApp
        if: steps.deploy-webapp-step.outcome != 'success'
        run: |
          sleep 30 &&
          ./ops/scripts/pipeline/az-app-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }}

  deploy-service:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'false'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy Azure Functions backend
        id: deploy-backend-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/az-func-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --kvName ${{ secrets.AZ_KV_APP_CONFIG_NAME }} \
          --kvSettings "MSSQL_HOST MSSQL_DATABASE_DXTR MSSQL_CLIENT_ID MSSQL_ENCRYPT MSSQL_TRUST_UNSIGNED_CERT FEATURE_FLAG_SDK_KEY" \
          --settings "STARTING_MONTH=${{ vars.STARTING_MONTH }} \
          COSMOS_ENDPOINT=https://${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}.documents.azure.us:443/ \
          COSMOS_DATABASE_NAME=${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
          COSMOS_MANAGED_IDENTITY=${{ needs.deploy.outputs.cosmosDbClientId }} \
          INFO_SHA=${{ github.sha }}" \
          --identities "${{ needs.deploy.outputs.cosmosDbPrincipalId }}" \
          --identitiesResourceGroup ${{ secrets.AZURE_RG }}

      - name: Retry Deploy Azure Functions backend
        if: steps.deploy-backend-step.outcome != 'success'
        run: |
          sleep 30 &&
          ./ops/scripts/pipeline/az-func-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --kvName ${{ secrets.AZ_KV_APP_CONFIG_NAME }} \
          --kvSettings "MSSQL_HOST MSSQL_DATABASE_DXTR MSSQL_CLIENT_ID MSSQL_ENCRYPT MSSQL_TRUST_UNSIGNED_CERT FEATURE_FLAG_SDK_KEY" \
          --settings "STARTING_MONTH=${{ vars.STARTING_MONTH }} \
          COSMOS_ENDPOINT=https://${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}.documents.azure.us:443/ \
          COSMOS_DATABASE_NAME=${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
          COSMOS_MANAGED_IDENTITY=${{ needs.deploy.outputs.cosmosDbClientId }} \
          INFO_SHA=${{ github.sha }}" \
          --identities "${{ needs.deploy.outputs.cosmosDbPrincipalId }}" \
          --identitiesResourceGroup ${{ secrets.AZURE_RG }}

  smoke-test-application:
    needs: [setup, deploy-webapp, deploy-service]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      - name: Health check api
        run: |
          ./ops/scripts/pipeline/endpoint-test.sh \
          --apiName ${{ needs.setup.outputs.apiName }} \
          --webappName ${{ needs.setup.outputs.webappName }} \
          --hostSuffix ${{ vars.AZ_HOSTNAME_SUFFIX }}

  ##### Below are GHA jobs related to Azure Slot deployments #####

  deploy-webapp-slot:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'true'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp Slot
        id: deploy-webapp-slot-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/slots/az-app-slot-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }} \
          --slotName ${{ needs.setup.outputs.slotName }}

      - name: Retry Deploy to Azure WebApp slot
        if: steps.deploy-webapp-slot-step.outcome != 'success'
        run: |
          sleep 30 &&
          ./ops/scripts/pipeline/slots/az-app-slot-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }} \
          --slotName ${{ needs.setup.outputs.slotName }}

  deploy-service-slot:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'true'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy Azure Functions slot backend
        id: deploy-backend-slot-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/slots/az-func-slot-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --slotName ${{ needs.setup.outputs.slotName }} \
          --settings "INFO_SHA=${{ github.sha }}"
      - name: Deploy Azure Functions slot backend
        id: deploy-backend-slot-retry
        if: steps.deploy-backend-slot-step.outcome != 'success'
        run: |
          ./ops/scripts/pipeline/slots/az-func-slot-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --slotName ${{ needs.setup.outputs.slotName }} \
          --settings "INFO_SHA=${{ github.sha }}"

  execute-e2e-test-pre-swap:
    needs: [setup, deploy-webapp-slot, deploy-service-slot]
    uses: ./.github/workflows/reusable-e2e.yml
    with:
      apiName: ${{ needs.setup.outputs.apiName }}
      slotName: ${{ needs.setup.outputs.slotName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      stackName: ${{ needs.setup.outputs.stackName }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      branchHashId: ${{ needs.setup.outputs.environmentHash }}
    secrets: inherit # pragma: allowlist secret

  swap-webapp-deployment-slot:
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        deploy-webapp-slot,
        deploy-service-slot,
        execute-e2e-test-pre-swap,
      ]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      webappName: ${{ needs.setup.outputs.webappName }}
      slotName: ${{ needs.setup.outputs.slotName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Swap Deployment Slot
        run: |
          az webapp deployment slot swap --slot ${{ env.slotName }} --name ${{ env.webappName }} -g ${{ steps.rgApp.outputs.out }}
          az webapp traffic-routing clear --name ${{ env.webappName }} -g ${{ steps.rgApp.outputs.out }}
      - name: Deny traffic
        run: |
          az webapp config access-restriction remove --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --slot ${{ env.slotName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0

  swap-nodeapi-deployment-slot:
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        deploy-webapp-slot,
        deploy-service-slot,
        execute-e2e-test-pre-swap,
      ]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      apiName: ${{ needs.setup.outputs.apiName }}
      slotName: ${{ needs.setup.outputs.slotName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Swap Deployment Slot
        run: |
          az functionapp deployment slot swap --slot ${{ env.slotName }} --name ${{ env.apiName }} -g ${{ steps.rgApp.outputs.out }}
          az webapp traffic-routing clear --name ${{ env.apiName }} -g ${{ steps.rgApp.outputs.out }}
      - name: Deny traffic
        run: |
          az functionapp config access-restriction remove --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --slot ${{ env.slotName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0

  smoke-test-application-post-swap:
    needs: [setup, swap-nodeapi-deployment-slot, swap-webapp-deployment-slot]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      - name: Health check api
        run: |
          ./ops/scripts/pipeline/endpoint-test.sh \
          --apiName ${{ needs.setup.outputs.apiName }} \
          --webappName ${{ needs.setup.outputs.webappName }} \
          --hostSuffix ${{ vars.AZ_HOSTNAME_SUFFIX }} \
          --slotName ${{ needs.setup.outputs.slotName }}
