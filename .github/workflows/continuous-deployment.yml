name: Continuous Deployment

concurrency: ${{ github.ref }}-${{ github.workflow }}

on:
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "**/*.md"
    branches-ignore:
      - "mob/**"
  workflow_dispatch:
    inputs:
      deployBranch:
        description: "Provision Azure resources for development branch and deploy build."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      deployVnet:
        description: "Enable Vnet creation"
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  build-info:
    runs-on: ubuntu-latest
    environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
    outputs:
      environment: ${{ vars.ENVIRONMENT }}
      stackName: ${{ steps.build-info.outputs.stackName }}
      webappName: ${{ steps.build-info.outputs.webappName }}
      apiName: ${{ steps.build-info.outputs.apiName }}
      execVnetDeploy: ${{ steps.build-info.outputs.execVnetDeploy }}
      azResourceGrpAppEncrypted: ${{ steps.rgApp.outputs.out }}
      azResourceGrpNetworkEncrypted: ${{ steps.rgNetwork.outputs.out }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check environment
        id: check-env
        if: ${{ vars.ENVIRONMENT != 'Main-Gov' }} # Generate deterministic hash to append to resource group names
        run: |
          hash=$(echo -n ${{ github.ref_name }} | openssl sha256 | awk '{print $2}')
          shortHash="-${hash:0:6}"
          echo "resourceGroupSuffix=${shortHash}" >> $GITHUB_OUTPUT

      - name: Print build info
        id: build-info
        run: |
          echo "Printing build info"
          echo "Azure Plan Type: ${{ vars.AZ_PLAN_TYPE }}"
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Target Azure Cloud: ${{ vars.AZURE_ENVIRONMENT }}"
          echo "Git SHA: ${{ github.sha }}"
          # Generate resource group name(s)
          resourceGroupSuffix=${{ steps.check-env.outputs.resourceGroupSuffix || '' }}
          echo "Resource group appended with the following: ${resourceGroupSuffix}"
          echo "azResourceGrpApp=${{ secrets.AZ_APP_RG }}${resourceGroupSuffix}" >> $GITHUB_OUTPUT
          echo "azResourceGrpNetwork=${{ secrets.AZ_NETWORK_RG }}${resourceGroupSuffix}" >> $GITHUB_OUTPUT

          # Stack name used downstream to label build artifacts and Azure resources
          stackName=$(ops/helper-scripts/generate-stackname.sh ${{ vars.ENVIRONMENT }} ${{ vars.APP_NAME }} ${{ vars.DEV_SUFFIX }} ${{ github.ref_name }})
          echo "Stack Name: $stackName"
          echo "stackName=${stackName}" >> $GITHUB_OUTPUT

          # Expected build artifact naming
          webappName="${stackName}-webapp"
          echo "Webapp Artifact: $webappName"
          echo "webappName=${webappName}" >> $GITHUB_OUTPUT
          apiName="${stackName}-node-api"
          echo "Api Artifact: $apiName"
          echo "apiName=${apiName}" >> $GITHUB_OUTPUT

          # Set to true to attempt to create a new virtual network
          execVnetDeploy=${{ inputs.deployVnet || 'true' }}
          echo "Execute virtual network deployment: ${execVnetDeploy}"
          echo "execVnetDeploy=${execVnetDeploy}" >> $GITHUB_OUTPUT

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.build-info.outputs.azResourceGrpApp }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.build-info.outputs.azResourceGrpNetwork }}

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--skip-sorting-imports --replace"

  accessibility-test:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest

    steps:
      - name: Install chrome
        uses: browser-actions/setup-chrome@v1

      - name: Get source code
        uses: actions/checkout@v3

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Install Node dependencies
        run: |
          pushd ../common
          npm ci
          popd

          npm ci && npm install -g pa11y-ci

      - name: Run pa11y Test
        run: ../ops/helper-scripts/accessibility-test.sh

  sast-scan-and-upload:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2

      - name: Package source code for scan
        run: zip -r cams.zip . -i "./backend/*" -i "./user-interface/*"

      - name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: 'CAMS'
          createprofile: false
          filepath: 'cams.zip'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          criticality: 'Medium'

  security-sast-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Package source code for scan
        run: zip -r cams.zip . -i "./backend/*" -i "./user-interface/*"

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - name: Download baseline file
        run: |
          az storage blob download \
          --account-name ${{ secrets.AZ_STOR_VERACODE_NAME }} \
          --account-key ${{ secrets.AZ_STOR_VERACODE_KEY }} \
          -c baseline \
          -n results-latest.json \
          -f ./results-latest.json

      - name: pipeline-scan
        id: pipeline-scan
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar --version

          java -jar pipeline-scan.jar \
          -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} \
          -bf results-latest.json \
          -jf results.json \
          -fjf filtered_results.json \
          --file cams.zip

      - name: Upload to storage account
        if: always()
        run: |
          az storage blob upload --account-name ${{ secrets.AZ_STOR_VERACODE_NAME }} --account-key ${{ secrets.AZ_STOR_VERACODE_KEY }} -f results.json -c results -n results-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.ref_name }}.json
          az storage blob upload --account-name ${{ secrets.AZ_STOR_VERACODE_NAME }} --account-key ${{ secrets.AZ_STOR_VERACODE_KEY }} -f filtered_results.json -c results -n filtered_results-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.ref_name }}.json

  security-sca-scan-frontend:
    runs-on: ubuntu-latest
    name: Scan repository frontend with Veracode SCA

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Veracode SCA for frontend
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
          SRCCLR_REGION: ${{ secrets.SRCCLR_REGION }}
        uses: veracode/veracode-sca@v2.1.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          path: user-interface/

  security-sca-scan-backend:
    runs-on: ubuntu-latest
    name: Scan repository backend with Veracode SCA

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Veracode SCA for backend
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
          SRCCLR_REGION: ${{ secrets.SRCCLR_REGION }}
        uses: veracode/veracode-sca@v2.1.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          path: backend/functions/

  security-sca-scan-common:
    runs-on: ubuntu-latest
    name: Scan repository common lib with Veracode SCA

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Veracode SCA for common
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
          SRCCLR_REGION: ${{ secrets.SRCCLR_REGION }}
        uses: veracode/veracode-sca@v2.1.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          path: common/

  build-frontend:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest
    needs: [build-info]
    environment: ${{ needs.build-info.outputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Execute Build
        run: |
          pushd ../common
          npm ci
          popd

          npm ci
          export CAMS_SERVER_HOSTNAME="${{ needs.build-info.outputs.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}"
          export CAMS_SERVER_PORT=${{ vars.CAMS_SERVER_PORT }}
          export CAMS_SERVER_PROTOCOL=${{ vars.CAMS_SERVER_PROTOCOL }}
          export CAMS_BASE_PATH=${{ vars.CAMS_BASE_PATH }}
          export CAMS_APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.AZ_APPINSIGHTS_WEBAPP_CONNECTION_STRING }}"
          export CAMS_FEATURE_FLAG_CLIENT_ID="${{ secrets.LD_DEVELOPMENT_CLIENT_ID }}"
          npm run build --if-present

      - name: Execute Coverage
        run: |
          CI=true npm run coverage

      - name: Package
        run: |
          mkdir artifacts
          tar -cvf artifacts/${{ needs.build-info.outputs.webappName }}.tar ./build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.webappName }}-build
          path: user-interface/artifacts/
          if-no-files-found: error

  build-service:
    defaults:
      run:
        working-directory: backend/functions

    runs-on: ubuntu-latest
    needs: [build-info]
    environment: ${{ needs.build-info.outputs.environment }}

    steps:
      - uses: actions/checkout@v3
      - name: Execute Build
        run: |
          npm ci
          npm run build

      - name: Execute Coverage
        run: |
          npm run coverage

      - name: Package Application
        run: OUT=${{ needs.build-info.outputs.apiName }} npm run pack

      - name: Upload Node Azure Functions Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.apiName }}-build
          path: backend/functions/${{ needs.build-info.outputs.apiName }}.zip
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: [build-info, build-frontend, build-service, accessibility-test, security-sast-scan, security-sca-scan-frontend, security-sca-scan-backend, security-sca-scan-common]
    environment: ${{ needs.build-info.outputs.environment }}
    if: ((github.ref == 'refs/heads/main') || (inputs.deployBranch == 'true'))
    outputs:
      cosmosDbClientId: ${{ steps.azure-db-deploy.outputs.cosmosDbClientId }}
      cosmosDbPrincipalId: ${{ steps.azure-db-deploy.outputs.cosmosDbPrincipalId }}

    steps:
      - run: echo "Current git reference ${{ github.ref_name }}"

      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpNetworkEncrypted }}

      - name: Create Azure resource groups
        id: azure-resource-group
        run: |
          ./ops/helper-scripts/azure-deploy-rg.sh \
            --show-what-if \
            --file ./ops/cloud-deployment/subscription/ustp-cams-rg.bicep \
            --parameters 'databaseResourceGroupName=${{ secrets.AZURE_RG }} networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} webappResourceGroupName=${{ steps.rgApp.outputs.out }} azSubscription=${{ secrets.AZURE_SUBSCRIPTION }}' -l ${{ secrets.AZ_LOCATION }}

      - name: Deploy Azure resources
        id: azure-deploy
        run: |
          ./ops/helper-scripts/azure-deploy.sh \
            --show-what-if \
            --resource-group ${{ steps.rgApp.outputs.out }} \
            --file ./ops/cloud-deployment/ustp-cams.bicep \
            --parameters 'appName=${{ needs.build-info.outputs.stackName }} deployVnet=${{ needs.build-info.outputs.execVnetDeploy }} deployNetwork=true networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} virtualNetworkName=${{ vars.AZ_NETWORK_VNET_NAME }} deployWebapp=true webappResourceGroupName=${{ steps.rgApp.outputs.out }} deployFunctions=true apiFunctionsResourceGroupName=${{ steps.rgApp.outputs.out }} sqlServerName=${{ secrets.AZ_SQL_SERVER_NAME }} sqlServerResourceGroupName=${{ secrets.AZURE_RG }} webappPlanType=${{ vars.AZ_PLAN_TYPE }} apiPlanType=${{ vars.AZ_PLAN_TYPE }} privateDnsZoneName=${{ vars.AZ_PRIVATE_DNS_ZONE }} deployAppInsights=true analyticsWorkspaceId=${{ secrets.AZ_ANALYTICS_WORKSPACE_ID }} analyticsResourceGroupName=${{ secrets.AZ_ANALYTICS_RG }} actionGroupName=${{ secrets.AZ_ACTION_GROUP_NAME }} createAlerts=${{ vars.ENVIRONMENT != 'Main-Gov' }} createActionGroup=${{ vars.ENVIRONMENT != 'Main-Gov' }} azHostSuffix=${{ vars.AZ_HOSTNAME_SUFFIX }} ustpIssueCollectorHash=${{ secrets.USTP_ISSUE_COLLECTOR_HASH }}'

          cosmosDbVnet=$(cat ./outputs.json | jq -r .vnetName.value)
          echo "cosmosDbVNet=${cosmosDbVnet}" >> $GITHUB_OUTPUT

          cosmosDbSnet=$(cat ./outputs.json | jq -r .cosmosDbAllowedSubnet.value)
          echo "cosmosDbSnet=${cosmosDbSnet}" >> $GITHUB_OUTPUT

      - name: Deploy database
        id: azure-db-deploy
        run: |
          allowedSubnet=$(az network vnet subnet show -g ${{ steps.rgNetwork.outputs.out }} --vnet-name ${{ vars.AZ_NETWORK_VNET_NAME }} -n snet-${{ needs.build-info.outputs.apiName }} --query id -o tsv)

          az deployment group create \
            -g ${{ secrets.AZURE_RG }} \
            -f ./ops/cloud-deployment/ustp-cams-cosmos.bicep \
            --parameter resourceGroupName=${{ secrets.AZURE_RG }} accountName=${{ secrets.AZ_COSMOS_ACCOUNT_NAME }} databaseName=${{ secrets.AZ_COSMOS_DATABASE_NAME }} allowedSubnet=${allowedSubnet} analyticsWorkspaceId=${{ secrets.AZ_ANALYTICS_WORKSPACE_ID }} allowAllNetworks=${{ vars.ENVIRONMENT != 'Main-Gov' }} actionGroupResourceGroupName=${{ secrets.AZ_ANALYTICS_RG }} actionGroupName=${{ secrets.AZ_ACTION_GROUP_NAME }} createAlerts=${{ vars.ENVIRONMENT != 'Main-Gov' }} \
            -o json --query properties.outputs | tee outputs.json

          cosmosDbClientId=$(cat ./outputs.json | jq -r .cosmosDbClientId.value)
          echo "cosmosDbClientId=${cosmosDbClientId}" >> $GITHUB_OUTPUT
          cosmosDbPrincipalId=$(cat ./outputs.json | jq -r .cosmosDbPrincipalId.value)
          echo "cosmosDbPrincipalId=${cosmosDbPrincipalId}" >> $GITHUB_OUTPUT

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: [build-info, deploy]
    environment: ${{ needs.build-info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp
        run: |
          ./ops/helper-scripts/az-app-deploy.sh \
          --src ./${{ needs.build-info.outputs.webappName }}.tar \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.build-info.outputs.webappName }}

  deploy-service:
    runs-on: ubuntu-latest
    needs: [build-info, deploy]
    environment: ${{ needs.build-info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-info.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy Azure Functions backend
        run: |
          ./ops/helper-scripts/az-func-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.build-info.outputs.apiName }} \
          --src ./${{ needs.build-info.outputs.apiName }}.zip \
          --settings "MSSQL_HOST=${{ secrets.AZ_MSSQL_HOST }} \
          MSSQL_DATABASE=${{ secrets.AZ_MSSQL_DATABASE }} \
          MSSQL_DATABASE_DXTR=${{ secrets.AZ_MSSQL_DATABASE_DXTR }} \
          MSSQL_USER=${{ secrets.AZ_MSSQL_USER }} \
          MSSQL_PASS=${{ secrets.AZ_MSSQL_PASS }} \
          MSSQL_ENCRYPT=${{ secrets.AZ_MSSQL_ENCRYPT }} \
          MSSQL_TRUST_UNSIGNED_CERT=${{ secrets.AZ_MSSQL_TRUST_UNSIGNED_CERT }} \
          STARTING_MONTH=${{ vars.STARTING_MONTH }} \
          COSMOS_ENDPOINT=https://${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}.documents.azure.us:443/ \
          COSMOS_DATABASE_NAME=${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
          COSMOS_MANAGED_IDENTITY=${{ needs.deploy.outputs.cosmosDbClientId }} \
          FEATURE_FLAG_SDK_KEY=${{ secrets.LD_DEVELOPMENT_SDK_KEY }}" \
          --identities "${{ needs.deploy.outputs.cosmosDbPrincipalId }}" \
          --identitiesResourceGroup ${{ secrets.AZURE_RG }}

  smoke-test-application:
    runs-on: ubuntu-latest
    needs: [build-info, deploy-webapp, deploy-service]
    environment: ${{ needs.build-info.outputs.environment }}
    env:
      stackName: ${{ needs.build-info.outputs.stackName }}
      webappName: ${{ needs.build-info.outputs.webappName }}
      apiName: ${{ needs.build-info.outputs.apiName }}
      priority: 200
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}
      - name: Enable GHA runner access
        run: |
          ops/helper-scripts/dev-add-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ env.stackName }} \
          -p ${{ env.priority }} \
          --is-cicd
      - name: Health check api
        run: |
          webStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ env.webappName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }})
          apiStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api/healthcheck)

          if [[ $webStatusCode = "200" && $apiStatusCode = "200" ]]; then
            exit 0
          else
            echo "Health check error. Response codes webStatusCode=$webStatusCode apiStatusCode=$apiStatusCode"
            exit 1
          fi
      - name: Execute Integration Tests
        run: |
          pushd backend/functions
          npm ci
          export CASES_FUNCTION_URL="https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api"
          npm run test:integration
          popd
      - name: Disable GHA runner access
        if: always()
        run: |
          name="gha-${{ env.priority }}-${{ env.stackName }}"
          ops/helper-scripts/dev-rm-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ env.stackName }} ${name:0:32}

  enable-access:
    runs-on: ubuntu-latest
    needs: [build-info, smoke-test-application]
    environment: ${{ needs.build-info.outputs.environment }}
    env:
      webappName: ${{ needs.build-info.outputs.webappName }}
      apiName: ${{ needs.build-info.outputs.apiName }}

    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}
      - name: Enable access
        run: |
          az webapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
          az functionapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
