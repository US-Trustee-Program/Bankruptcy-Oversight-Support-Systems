name: Continuous Deployment

concurrency: ${{ github.ref }}-${{ github.workflow }}

on:
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "**/*.md"
    branches-ignore:
      - "mob/**"
  workflow_dispatch:
    inputs:
      deployBranch:
        description: "Provision Azure resources for development branch and deploy build."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      deployVnet:
        description: "Enable Vnet creation"
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      enableSlotDeployment:
        description:
          "False for full deployment of Azure resources. True will deploy to existing environment
          with Slots resources."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      enableBicepDeployment:
        description:
          "Default: false will not deploy bicep changes unless there are changes to the bicep. True
          will deploy bicep to Azure."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  setup:
    name: Setup
    uses: ./.github/workflows/reusable-build-info.yml
    secrets: inherit # pragma: allowlist secret
    with:
      environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
      enableSlotDeployment: ${{ inputs.enableSlotDeployment }}
      enableBicepDeployment: ${{ inputs.enableBicepDeployment }}
      deployVnet: ${{ inputs.deployVnet }}

  accessibility-test:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest

    steps:
      - name: Install chrome
        uses: browser-actions/setup-chrome@v1

      - name: Get source code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Install Node dependencies
        run: |
          pushd ../common
          npm ci
          popd

          npm ci && npm install -g pa11y-ci

      - name: Run pa11y Test
        run: ../ops/scripts/pipeline/accessibility-test.sh

  security-scan:
    name: Security
    uses: ./.github/workflows/sub-security-scan.yml
    secrets: inherit # pragma: allowlist secret

  validation:
    name: Validation
    uses: ./.github/workflows/sub-validation.yml
    with:
      node-version: ${{ vars.NODE_VERSION }}

  build:
    name: Build
    needs: [setup]
    uses: ./.github/workflows/sub-build.yml
    secrets: inherit # pragma: allowlist secret
    with:
      nodeVersion: ${{ vars.NODE_VERSION }}
      apiName: ${{ needs.setup.outputs.apiName }}
      camsServerHostname: ${{ needs.setup.outputs.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}
      camsServerPort: ${{ vars.CAMS_SERVER_PORT }}
      camsServerProtocol: ${{ vars.CAMS_SERVER_PROTOCOL }}
      camsBasePath: ${{ vars.CAMS_BASE_PATH }}
      webappName: ${{ needs.setup.outputs.webappName }}
      environment: ${{ needs.setup.outputs.ghaEnvironment }}

  deploy-db:
    name: ComosDb
    needs: [setup, build, accessibility-test, security-scan, validation]
    uses: ./.github/workflows/reusable-database-deploy.yml
    secrets: inherit # pragma: allowlist secret
    if: ((github.ref == 'refs/heads/main') || (inputs.deployBranch == 'true'))
    with:
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpNetworkEncrypted: ${{ needs.setup.outputs.azResourceGrpNetworkEncrypted }}
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
      apiName: ${{ needs.setup.outputs.apiName }}

  deploy-infra:
    name: Azure Resources
    needs: [setup, build, accessibility-test, security-scan, validation]
    uses: ./.github/workflows/reusable-deploy.yml
    if: ((github.ref == 'refs/heads/main') || (inputs.deployBranch == 'true'))
    with:
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      azResourceGrpNetworkEncrypted: ${{ needs.setup.outputs.azResourceGrpNetworkEncrypted }}
      stackName: ${{ needs.setup.outputs.stackName }}
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
      execVnetDeploy: ${{ needs.setup.outputs.execVnetDeploy }}
      slotDeploymentEnabled: ${{ needs.setup.outputs.slotDeploymentEnabled }}
      deployBranch: ${{ inputs.deployBranch }}
      deployBicep: ${{ needs.setup.outputs.deployBicep }}
    secrets: inherit # pragma: allowlist secret

  deploy-frontend-slot-resources:
    name: Deploy
    needs:
      [
        setup,
        build,
        accessibility-test,
        security-scan,
        validation,
        deploy-infra,
      ]
    uses: ./.github/workflows/reusable-frontend-slot.yml
    if: ((github.ref == 'refs/heads/main') || (inputs.deployBranch == 'true'))
    with:
      webAppName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      azResourceGrpNetworkEncrypted: ${{ needs.setup.outputs.azResourceGrpNetworkEncrypted }}
      slotName: ${{ needs.setup.outputs.slotName }}
      slotDeploymentEnabled: ${{ needs.setup.outputs.slotDeploymentEnabled }}
    secrets: inherit # pragma: allowlist secret

  deploy:
    runs-on: ubuntu-latest
    needs: [setup, build, accessibility-test, security-scan, validation]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    # if: ((github.ref == 'refs/heads/main') || (inputs.deployBranch == 'true'))
    if: false # TODO CAMS-237 disable this for now
    outputs:
      cosmosDbClientId: ${{ steps.set-deploy-params.outputs.cosmosDbClientId }}
      cosmosDbPrincipalIdEncrypted: ${{ steps.cosmosPrincipalId.outputs.out }}

    steps:
      - run: echo "Current git reference ${{ github.ref_name }}"

      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpNetworkEncrypted }}

      - name: Create Azure resource groups
        id: azure-resource-group
        if: needs.setup.outputs.deployBicep == 'true'
        run: |
          ./ops/scripts/pipeline/azure-deploy-rg.sh \
            --show-what-if \
            --file ./ops/cloud-deployment/lib/subscription/ustp-cams-rg.bicep \
            --parameters 'databaseResourceGroupName=${{ secrets.AZURE_RG }} networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} webappResourceGroupName=${{ steps.rgApp.outputs.out }} azSubscription=${{ secrets.AZURE_SUBSCRIPTION }} branchName=${{ github.ref_name }} branchHashId=${{ needs.setup.outputs.environmentHash }} isBranchDeployment=${{ inputs.deployBranch || false}}' \
            -l ${{ secrets.AZ_LOCATION }}

      - name: Deploy Azure resources
        id: azure-deploy
        if: needs.setup.outputs.deployBicep == 'true'
        run: |
          ./ops/scripts/pipeline/azure-deploy.sh \
            --show-what-if \
            --resource-group ${{ steps.rgApp.outputs.out }} \
            --file ./ops/cloud-deployment/main.bicep \
            --parameters 'appName=${{ needs.setup.outputs.stackName }} deployVnet=${{ needs.setup.outputs.execVnetDeploy }} deployNetwork=true networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} virtualNetworkName=${{ vars.AZ_NETWORK_VNET_NAME }} deployWebapp=${{ needs.setup.outputs.slotDeploymentEnabled == 'false' }} webappResourceGroupName=${{ steps.rgApp.outputs.out }} deployFunctions=${{ needs.setup.outputs.slotDeploymentEnabled == 'false' }} apiFunctionsResourceGroupName=${{ steps.rgApp.outputs.out }} sqlServerName=${{ secrets.AZ_SQL_SERVER_NAME }} sqlServerResourceGroupName=${{ secrets.AZURE_RG }} sqlServerIdentityName=${{ secrets.AZ_SQL_IDENTITY_NAME }} webappPlanType=${{ vars.AZ_PLAN_TYPE }} apiPlanType=${{ vars.AZ_PLAN_TYPE }} privateDnsZoneName=${{ vars.AZ_PRIVATE_DNS_ZONE }} deployAppInsights=true analyticsWorkspaceId=${{ secrets.AZ_ANALYTICS_WORKSPACE_ID }} analyticsResourceGroupName=${{ secrets.AZ_ANALYTICS_RG }} actionGroupName=${{ secrets.AZ_ACTION_GROUP_NAME }} createAlerts=${{ needs.setup.outputs.ghaEnvironment != 'Main-Gov' }} createActionGroup=${{ needs.setup.outputs.ghaEnvironment != 'Main-Gov' }} azHostSuffix=${{ vars.AZ_HOSTNAME_SUFFIX }} camsReactSelectHash=${{ secrets.CAMS_REACT_SELECT_HASH }} ustpIssueCollectorHash=${{ secrets.USTP_ISSUE_COLLECTOR_HASH }} idKeyvaultAppConfiguration=${{ secrets.AZ_KV_APP_CONFIG_MANAGED_ID }} kvAppConfigResourceGroupName=${{ secrets.AZ_KV_APP_CONFIG_RG_NAME }}'

      - name: Check deployment and set params
        id: set-deploy-params
        run: |
          cosmosDbClientId=$(az identity list -g bankruptcy-oversight-support-systems --query "[?name=='id-${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}-user'].clientId" -o tsv)
          echo "cosmosDbClientId=${cosmosDbClientId}" >> $GITHUB_OUTPUT
          cosmosDbPrincipalId=$(az identity list -g bankruptcy-oversight-support-systems --query "[?name=='id-${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}-user'].principalId" -o tsv)
          echo "cosmosDbPrincipalId=${cosmosDbPrincipalId}" >> $GITHUB_OUTPUT
          echo "CosmosDbPrincipalId: $cosmosDbPrincipalId"
          cosmosDbManagedIdName=id-${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}-user
          echo "cosmosDbManagedIdName=${cosmosDbManagedIdName}" >> $GITHUB_OUTPUT
          webappSubnetName=snet-${{ needs.setup.outputs.webappName }}
          echo "webappSubnetName=${webappSubnetName}" >> $GITHUB_OUTPUT
      - uses: cloudposse/github-action-secret-outputs@main
        id: cosmosPrincipalId
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.set-deploy-params.outputs.cosmosDbPrincipalId }}
      - name: Create Webapp Slot Resource
        if: (needs.setup.outputs.slotDeploymentEnabled == 'true')
        run: |
          ./ops/scripts/pipeline/slots/az-slot-web-resource-deploy.sh \
            --webappName ${{ needs.setup.outputs.webappName }} \
            --apiName ${{ needs.setup.outputs.apiName }} \
            --resourceGroup ${{ steps.rgApp.outputs.out }} \
            --slotName ${{ needs.setup.outputs.slotName }} \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION }} \
            --network-rg ${{ steps.rgNetwork.outputs.out }} \
            --vnet ${{ vars.AZ_NETWORK_VNET_NAME }} \
            --subnet ${{ steps.set-deploy-params.outputs.webappSubnetName }}

      - name: Create API Slot Resource
        if: (needs.setup.outputs.slotDeploymentEnabled == 'true')
        run: |
          slotStorageAccountName=ustpslot${{ needs.setup.outputs.environmentHash }}

          ./ops/scripts/pipeline/slots/az-slot-api-resource-deploy.sh \
            --apiName ${{ needs.setup.outputs.apiName }} \
            --webappName ${{ needs.setup.outputs.webappName }} \
            --resourceGroup ${{ steps.rgApp.outputs.out }} \
            --idResourceGroup ${{ secrets.AZURE_RG }} \
            --slotName ${{ needs.setup.outputs.slotName }} \
            --kvIdName ${{ secrets.AZ_KV_APP_CONFIG_MANAGED_ID }} \
            --sqlIdName ${{ secrets.AZ_SQL_IDENTITY_NAME }} \
            --cosmosIdName ${{ steps.set-deploy-params.outputs.cosmosDbManagedIdName }} \
            --branchHashId ${{ needs.setup.outputs.environmentHash || 'DOES_NOT_EXIST' }} \
            --databaseName ${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
            --storageAccName ${slotStorageAccountName:0:24}

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'false'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp
        id: deploy-webapp-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/az-app-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }}

      - name: Retry Deploy to Azure WebApp
        if: steps.deploy-webapp-step.outcome != 'success'
        run: |
          sleep 30 &&
          ./ops/scripts/pipeline/az-app-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }}

  deploy-service:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'false'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: cosmosPrincipalId
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.deploy.outputs.cosmosDbPrincipalIdEncrypted }}

      - name: Deploy Azure Functions backend
        id: deploy-backend-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/az-func-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --kvName ${{ secrets.AZ_KV_APP_CONFIG_NAME }} \
          --kvSettings "MSSQL_HOST MSSQL_DATABASE_DXTR MSSQL_CLIENT_ID MSSQL_ENCRYPT MSSQL_TRUST_UNSIGNED_CERT FEATURE_FLAG_SDK_KEY" \
          --settings "STARTING_MONTH=${{ vars.STARTING_MONTH }} \
          COSMOS_ENDPOINT=https://${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}.documents.azure.us:443/ \
          COSMOS_DATABASE_NAME=${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
          COSMOS_MANAGED_IDENTITY=${{ needs.deploy.outputs.cosmosDbClientId }} \
          INFO_SHA=${{ github.sha }}" \
          --identities "${{ steps.cosmosPrincipalId.outputs.out }}" \
          --identitiesResourceGroup ${{ secrets.AZURE_RG }}

      - name: Retry Deploy Azure Functions backend
        if: steps.deploy-backend-step.outcome != 'success'
        run: |
          sleep 30 &&
          ./ops/scripts/pipeline/az-func-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --kvName ${{ secrets.AZ_KV_APP_CONFIG_NAME }} \
          --kvSettings "MSSQL_HOST MSSQL_DATABASE_DXTR MSSQL_CLIENT_ID MSSQL_ENCRYPT MSSQL_TRUST_UNSIGNED_CERT FEATURE_FLAG_SDK_KEY" \
          --settings "STARTING_MONTH=${{ vars.STARTING_MONTH }} \
          COSMOS_ENDPOINT=https://${{ secrets.AZ_COSMOS_ACCOUNT_NAME }}.documents.azure.us:443/ \
          COSMOS_DATABASE_NAME=${{ secrets.AZ_COSMOS_DATABASE_NAME }} \
          COSMOS_MANAGED_IDENTITY=${{ needs.deploy.outputs.cosmosDbClientId }} \
          INFO_SHA=${{ github.sha }}" \
          --identities "${{ steps.cosmosPrincipalId.outputs.out }}" \
          --identitiesResourceGroup ${{ secrets.AZURE_RG }}
  smoke-test-app-reusable:
    name: Smoke Test App
    needs: [setup, deploy-webapp, deploy-service]
    uses: ./.github/workflows/reusable-smoketest.yml
    secrets: inherit # pragma: allowlist secret
    with:
      environment: ${{ needs.setup.outputs.ghaEnvironment }}
      stackName: ${{ needs.setup.outputs.stackName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      azRgEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

  smoke-test-application:
    runs-on: ubuntu-latest
    needs: [setup, deploy-webapp, deploy-service]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      stackName: ${{ needs.setup.outputs.stackName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      branchHashId: ${{ needs.setup.outputs.environmentHash }}
      priority: 200
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Enable GHA runner access
        run: |
          ops/scripts/pipeline/dev-add-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ env.stackName }} \
          -p ${{ env.priority }} \
          --is-cicd
      - name: Health check api
        run: |
          webStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ env.webappName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }} )
          apiStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api/healthcheck )

          if [[ $webStatusCode = "200" && $apiStatusCode = "200" ]]; then
            echo "Print api healthcheck response"
            curl https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api/healthcheck?x-ms-routing-name=${{ env.slotName }}
            exit 0
          else
            echo "Health check error. Response codes webStatusCode=$webStatusCode apiStatusCode=$apiStatusCode"
            exit 1
          fi

      - name: Execute Integration Tests
        run: |
          pushd backend/functions
          npm ci
          export CASES_FUNCTION_URL="https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api"
          npm run test:integration
          popd

      - name: Disable GHA runner access
        if: always()
        run: |
          name="gha-${{ env.priority }}-${{ env.stackName }}"
          ops/scripts/pipeline/dev-rm-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ env.stackName }} ${name:0:32}

  enable-access:
    runs-on: ubuntu-latest
    needs: [setup, smoke-test-application]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      webappName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Enable access
        run: |
          az webapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
          az functionapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true

  ##### Below are GHA jobs related to Azure Slot deployments #####

  deploy-webapp-slot:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'true'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp Slot
        id: deploy-webapp-slot-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/slots/az-app-slot-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }} \
          --slotName ${{ needs.setup.outputs.slotName }}

      - name: Retry Deploy to Azure WebApp slot
        if: steps.deploy-webapp-slot-step.outcome != 'success'
        run: |
          sleep 30 &&
          ./ops/scripts/pipeline/slots/az-app-slot-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }} \
          --slotName ${{ needs.setup.outputs.slotName }}

  deploy-service-slot:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    if: needs.setup.outputs.slotDeploymentEnabled == 'true'
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy Azure Functions slot backend
        id: deploy-backend-slot-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/slots/az-func-slot-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --slotName ${{ needs.setup.outputs.slotName }} \
          --settings "INFO_SHA=${{ github.sha }}"
      - name: Deploy Azure Functions slot backend
        id: deploy-backend-slot-retry
        if: steps.deploy-backend-slot-step.outcome != 'success'
        run: |
          ./ops/scripts/pipeline/slots/az-func-slot-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --slotName ${{ needs.setup.outputs.slotName }} \
          --settings "INFO_SHA=${{ github.sha }}"

  execute-e2e-test-pre-swap:
    needs: [setup, deploy-webapp-slot, deploy-service-slot]
    uses: ./.github/workflows/reusable-e2e.yml
    with:
      apiName: ${{ needs.setup.outputs.apiName }}
      slotName: ${{ needs.setup.outputs.slotName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      stackName: ${{ needs.setup.outputs.stackName }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      azureEnvironment: ${{ vars.AZURE_ENVIRONMENT }}
      azureHostnameSuffix: ${{ vars.AZ_HOSTNAME_SUFFIX }}
      deploymentEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      branchHashId: ${{ needs.setup.outputs.environmentHash }}
    secrets: inherit # pragma: allowlist secret

  swap-webapp-deployment-slot:
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        deploy-webapp-slot,
        deploy-service-slot,
        execute-e2e-test-pre-swap,
      ]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      webappName: ${{ needs.setup.outputs.webappName }}
      slotName: ${{ needs.setup.outputs.slotName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Swap Deployment Slot
        run: |
          az webapp deployment slot swap --slot ${{ env.slotName }} --name ${{ env.webappName }} -g ${{ steps.rgApp.outputs.out }}
          az webapp traffic-routing clear --name ${{ env.webappName }} -g ${{ steps.rgApp.outputs.out }}
  swap-nodeapi-deployment-slot:
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        deploy-webapp-slot,
        deploy-service-slot,
        execute-e2e-test-pre-swap,
      ]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      apiName: ${{ needs.setup.outputs.apiName }}
      slotName: ${{ needs.setup.outputs.slotName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Swap Deployment Slot
        run: |
          az functionapp deployment slot swap --slot ${{ env.slotName }} --name ${{ env.apiName }} -g ${{ steps.rgApp.outputs.out }}
          az webapp traffic-routing clear --name ${{ env.apiName }} -g ${{ steps.rgApp.outputs.out }}

  smoke-test-post-swap:
    name: smoke
    needs: [setup, swap-nodeapi-deployment-slot, swap-webapp-deployment-slot]
    uses: ./.github/workflows/reusable-smoketest.yml
    secrets: inherit # pragma: allowlist secret
    with:
      environment: ${{ needs.setup.outputs.ghaEnvironment }}
      stackName: ${{ needs.setup.outputs.stackName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      azRgEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      slotName: ${{ needs.setup.outputs.slotName }}

  smoke-test-application-post-swap:
    runs-on: ubuntu-latest
    needs: [setup, swap-nodeapi-deployment-slot, swap-webapp-deployment-slot]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    env:
      stackName: ${{ needs.setup.outputs.stackName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      slotName: ${{ needs.setup.outputs.slotName }}
      priority: 200
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - name: Enable GHA runner access
        run: |
          ops/scripts/pipeline/dev-add-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ env.stackName }} \
          -p ${{ env.priority }} \
          --is-cicd
      - name: Health check api
        run: |
          webStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ env.webappName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }} )
          apiStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api/healthcheck )

          if [[ $webStatusCode = "200" && $apiStatusCode = "200" ]]; then
            echo "Print api healthcheck response"
            curl https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api/healthcheck?x-ms-routing-name=${{ env.slotName }}
            exit 0
          else
            echo "Health check error. Response codes webStatusCode=$webStatusCode apiStatusCode=$apiStatusCode"
            exit 1
          fi

      - name: Execute Integration Tests
        run: |
          pushd backend/functions
          npm ci
          export CASES_FUNCTION_URL="https://${{ env.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}/api"
          npm run test:integration
          popd

      - name: Disable GHA runner access
        if: always()
        run: |
          name="gha-${{ env.priority }}-${{ env.stackName }}"
          ops/scripts/pipeline/dev-rm-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ env.stackName }} ${name:0:32}
