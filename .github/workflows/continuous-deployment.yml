name: Continuous Deployment

concurrency: ${{ github.ref }}-${{ github.workflow }}

on:
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "**/*.md"
    branches-ignore:
      - "mob/**"
  workflow_dispatch:
    inputs:
      deployBranch:
        description: "Provision Azure resources for development branch and deploy build."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      deployVnet:
        description: "Enable Vnet creation"
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      enableSlotDeployment:
        description:
          "False for full deployment of Azure resources. True will deploy to existing environment
          with Slots resources."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      enableBicepDeployment:
        description:
          "Default: false will not deploy bicep changes unless there are changes to the bicep. True
          will deploy bicep to Azure."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      initialDeployment:
        description: "Default: false. If is initial deployment, true value will create slot resources and deploy code to them."
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  setup:
    name: Setup
    uses: ./.github/workflows/reusable-build-info.yml
    secrets: inherit # pragma: allowlist secret
    with:
      environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
      enableSlotDeployment: ${{ inputs.enableSlotDeployment }}
      enableBicepDeployment: ${{ inputs.enableBicepDeployment }}
      deployVnet: ${{ inputs.deployVnet }}

  accessibility-test:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest

    steps:
      - name: Install chrome
        uses: browser-actions/setup-chrome@v1

      - name: Get source code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Install Node dependencies
        run: |
          pushd ../common
          npm ci
          popd

          npm ci && npm install -g pa11y-ci

      - name: Run pa11y Test
        run: ../ops/scripts/pipeline/accessibility-test.sh

  unit-test-frontend:
    uses: ./.github/workflows/reusable-unit-test.yml
    with:
      path: user-interface
      node-version: ${{ vars.NODE_VERSION }}

  unit-test-backend:
    uses: ./.github/workflows/reusable-unit-test.yml
    with:
      path: backend/functions
      node-version: ${{ vars.NODE_VERSION }}

  unit-test-common:
    uses: ./.github/workflows/reusable-unit-test.yml
    with:
      path: common
      node-version: ${{ vars.NODE_VERSION }}

  security-scan:
    name: Security
    uses: ./.github/workflows/sub-security-scan.yml
    secrets: inherit # pragma: allowlist secret

  build:
    name: Build
    needs: [setup]
    uses: ./.github/workflows/sub-build.yml
    secrets: inherit # pragma: allowlist secret
    with:
      nodeVersion: ${{ vars.NODE_VERSION }}
      apiName: ${{ needs.setup.outputs.apiName }}
      camsServerHostname: ${{ needs.setup.outputs.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}
      camsServerPort: ${{ vars.CAMS_SERVER_PORT }}
      camsServerProtocol: ${{ vars.CAMS_SERVER_PROTOCOL }}
      camsBasePath: ${{ vars.CAMS_BASE_PATH }}
      webappName: ${{ needs.setup.outputs.webappName }}
      environment: ${{ needs.setup.outputs.ghaEnvironment }}
      launchDarklyEnvironment: ${{ vars.CAMS_LAUNCH_DARKLY_ENV }}

  deploy:
    name: Cloud Resource Deployment
    uses: ./.github/workflows/sub-deploy.yml
    needs:
      [
        setup,
        build,
        accessibility-test,
        security-scan,
        unit-test-frontend,
        unit-test-backend,
        unit-test-common,
      ]
    if: ((github.ref == 'refs/heads/main') || (inputs.deployBranch == 'true'))
    with:
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      azResourceGrpNetworkEncrypted: ${{ needs.setup.outputs.azResourceGrpNetworkEncrypted }}
      stackName: ${{ needs.setup.outputs.stackName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      webAppName: ${{ needs.setup.outputs.webappName }}
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
      execVnetDeploy: ${{ needs.setup.outputs.execVnetDeploy }}
      slotName: ${{ needs.setup.outputs.slotName }}
      slotDeploymentEnabled: ${{ needs.setup.outputs.slotDeploymentEnabled }}
      deployBranch: ${{ github.ref != 'refs/heads/main' }}
      deployBicep: ${{ needs.setup.outputs.deployBicep }}
    secrets: inherit # pragma: allowlist secret

  deploy-code:
    name: Production Code Deployment
    uses: ./.github/workflows/sub-deploy-code.yml
    needs: [setup, deploy]
    if: needs.setup.outputs.slotDeploymentEnabled == 'false'
    with:
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      stackName: ${{ needs.setup.outputs.stackName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      webAppName: ${{ needs.setup.outputs.webappName }}
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
      cosmosDbClientId: ${{ needs.deploy.outputs.cosmosDbClientId }}
      cosmosDbPrincipalId: ${{ needs.deploy.outputs.cosmosDbPrincipalId }}
    secrets: inherit # pragma: allowlist secret

  initial-slot-resource-deployment: ##setup slot resources on initial deployment
    name: Initial Deployment of Slot Resources
    uses: ./.github/workflows/sub-deploy-slot-resources.yml
    needs: [setup, deploy]
    if: ${{ inputs.initialDeployment == 'true' }}
    with:
      webAppName: ${{ needs.setup.outputs.webappName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      azResourceGrpNetworkEncrypted: ${{ needs.setup.outputs.azResourceGrpNetworkEncrypted }}
      slotName: ${{ needs.setup.outputs.slotName }}
      slotDeploymentEnabled: "true"
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
    secrets: inherit # pragma: allowlist secret

  initial-deploy-code-slot:
    name: Slot Code Deployment
    uses: ./.github/workflows/sub-deploy-code-slot.yml
    needs: [setup, deploy, initial-slot-resource-deployment]
    if: ${{ inputs.initialDeployment == 'true' }}
    with:
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      stackName: ${{ needs.setup.outputs.stackName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      webAppName: ${{ needs.setup.outputs.webappName }}
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
      cosmosDbClientId: ${{ needs.deploy.outputs.cosmosDbClientId }}
      cosmosDbPrincipalId: ${{ needs.deploy.outputs.cosmosDbPrincipalId }}
      slotName: ${{ needs.setup.outputs.slotName }}
      e2eCosmosDbExists: ${{ needs.deploy.outputs.e2eCosmosDbExists }}
      initialDeployment: ${{ inputs.initialDeployment }}
    secrets: inherit # pragma: allowlist secret

  deploy-code-slot:
    name: Slot Code Deployment
    uses: ./.github/workflows/sub-deploy-code-slot.yml
    needs: [setup, deploy]
    if: ${{ needs.setup.outputs.slotDeploymentEnabled == 'true' && inputs.initialDeployment != 'true' }}
    with:
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      stackName: ${{ needs.setup.outputs.stackName }}
      apiName: ${{ needs.setup.outputs.apiName }}
      webAppName: ${{ needs.setup.outputs.webappName }}
      environmentHash: ${{ needs.setup.outputs.environmentHash }}
      cosmosDbClientId: ${{ needs.deploy.outputs.cosmosDbClientId }}
      cosmosDbPrincipalId: ${{ needs.deploy.outputs.cosmosDbPrincipalId }}
      slotName: ${{ needs.setup.outputs.slotName }}
      e2eCosmosDbExists: ${{ needs.deploy.outputs.e2eCosmosDbExists }}
      initialDeployment: ${{ inputs.initialDeployment }}
    secrets: inherit # pragma: allowlist secret
