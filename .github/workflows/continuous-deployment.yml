name: Continuous Deployment

concurrency: ${{ github.ref }}

on:
  push:
    branches:
    - 'main'
    - 'CAMS-*'

  # TODO: need to verify once this get merged into default branch
  workflow_dispatch:
    inputs:
      deployVnet:
        description: 'Enable Vnet creation'
        required: true
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'

jobs:
  Build-Info:
    runs-on: ubuntu-latest
    environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main' || 'Develop' }}
    outputs:
      environment: ${{ vars.ENVIRONMENT }}
      branchHashCode: ${{ steps.build-info.outputs.branchHashCode }}
      stackName: ${{ steps.build-info.outputs.stackName }}
      webappName: ${{ steps.build-info.outputs.webappName }}
      apiName: ${{ steps.build-info.outputs.apiName }}
      execVnetDeploy: ${{ steps.build-info.outputs.execVnetDeploy }}
      azResourceGrpAppEncrypted: ${{ steps.rgApp.outputs.out }}
      azResourceGrpNetworkEncrypted: ${{ steps.rgNetwork.outputs.out }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Print build info
        id: build-info
        run: |
          echo "Printing build info"
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Git SHA: ${{ github.sha }}"

          # Generate resource group name(s)
          hash=$(echo -n ${{ github.ref_name }} | openssl sha256 | awk '{print $2}')
          short_hash=${hash:0:6}
          echo "Hash generated from ${{ github.ref_name }} : ${hash}  ${short_hash}"
          echo "branchHashCode=${short_hash}" >> $GITHUB_OUTPUT
          echo "azResourceGrpApp=${{ secrets.AZ_APP_RG }}-${short_hash}" >> $GITHUB_OUTPUT
          echo "azResourceGrpNetwork=${{ secrets.AZ_NETWORK_RG }}-${short_hash}" >> $GITHUB_OUTPUT

          # Stack name used downstream to label build artifacts and Azure resources
          stackName=$(ops/helper-scripts/generate-stackname.sh ${{ vars.ENVIRONMENT }} ${{ vars.APP_NAME }} ${{ vars.DEV_SUFFIX }} ${{ github.ref_name }})
          echo "Stack Name: $stackName"
          echo "stackName=${stackName}" >> $GITHUB_OUTPUT

          # Expected build artifact naming
          webappName="${stackName}-webapp"
          echo "Webapp Artifact: $webappName"
          echo "webappName=${webappName}" >> $GITHUB_OUTPUT
          apiName="${stackName}-node-api"
          echo "Api Artifact: $apiName"
          echo "apiName=${apiName}" >> $GITHUB_OUTPUT

          # Set to true to attempt to create a new virtual network
          execVnetDeploy=${{ inputs.deployVnet || 'true' }}
          echo "Execute virtual network deployment: ${execVnetDeploy}"
          echo "execVnetDeploy=${execVnetDeploy}" >> $GITHUB_OUTPUT

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.build-info.outputs.azResourceGrpApp }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.build-info.outputs.azResourceGrpNetwork }}

  smoke-test-application-exp:
    runs-on: ubuntu-latest
    needs: [Build-Info]
    environment: ${{ needs.Build-Info.outputs.environment }}
    env:
      stackName: ${{ needs.Build-Info.outputs.stackName }}
      webappName: ${{ needs.Build-Info.outputs.webappName }}
      apiName: ${{ needs.Build-Info.outputs.apiName }}
    steps:
      - uses: actions/checkout@v3
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.Build-Info.outputs.azResourceGrpAppEncrypted }}
      - name: Enable GHA runner access
        run: ops/helper-scripts/dev-add-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ env.stackName }} 100 true
      - name: Health check api
        run: |
          sleep 5
          webStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" https://${{ env.webappName }}.azurewebsites.net)
          sleep 5
          apiStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" https://${{ env.apiName }}.azurewebsites.net/api/healthcheck)

          if [[ $webStatusCode = "200" && $apiStatusCode = "200" ]]; then
            exit 0
          else
            echo "Health check error. Response codes webStatusCode=$webStatusCode apiStatusCode=$apiStatusCode"
            exit 1
          fi
      # - name: Disable GHA runner access
      #   run: ops/helper-scripts/dev-rm-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ env.stackName }} ?
      - name: Veracode Prescan
        run: |
          echo "Still work in progress..."


  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--skip-sorting-imports --replace"

  security-sca-scan-frontend:
    runs-on: ubuntu-latest
    name: Scan repository frontend with Veracode SCA

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Veracode SCA for frontend
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
          SRCCLR_REGION: ${{ secrets.SRCCLR_REGION }}
        uses: veracode/veracode-sca@v2.1.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          path: user-interface/

  security-sca-scan-backend:
    runs-on: ubuntu-latest
    name: Scan repository backend with Veracode SCA

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Veracode SCA for backend
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
          SRCCLR_REGION: ${{ secrets.SRCCLR_REGION }}
        uses: veracode/veracode-sca@v2.1.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          path: backend/functions/

  build-frontend:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest
    needs: [ Build-Info, security-sca-scan-frontend ]
    environment: ${{ needs.Build-Info.outputs.environment }}

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Execute Build
        run: |
          npm ci
          export REACT_APP_SERVER_HOSTNAME="${{ needs.Build-Info.outputs.apiName }}.azurewebsites.net"
          export REACT_APP_SERVER_PORT=${{ vars.REACT_APP_SERVER_PORT }}
          export REACT_APP_SERVER_PROTOCOL=${{ vars.REACT_APP_SERVER_PROTOCOL }}
          export REACT_APP_BASE_PATH=${{ vars.REACT_APP_BASE_PATH }}
          npm run build --if-present

      - name: Execute Test
        run: CI=true npm test

      - name: Package
        run: |
          mkdir artifacts
          tar -cvf artifacts/${{ needs.Build-Info.outputs.webappName }}.tar ./build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.webappName }}-build
          path: user-interface/artifacts/
          if-no-files-found: error

  accessibility-test:
    defaults:
      run:
        working-directory: user-interface

    runs-on: ubuntu-latest

    needs: [Build-Info]
    environment: ${{ needs.Build-Info.outputs.environment }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Install chrome
        uses: browser-actions/setup-chrome@v1

      - name: Get source code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: user-interface/package-lock.json

      - name: Install Node dependencies
        run: npm ci && npm install -g pa11y-ci

      - name: Run pa11y Test
        run: ../ops/helper-scripts/accessibility-test.sh

  build-service:
    defaults:
      run:
        working-directory: backend/functions

    runs-on: ubuntu-latest
    needs: [ Build-Info, security-sca-scan-backend ]
    environment: ${{ needs.Build-Info.outputs.environment }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Execute Build
        run: |
          npm ci
          npm run build

      - name: Execute Tests
        run: npm run test

      - name: Package Application
        run: OUT=${{ needs.Build-Info.outputs.apiName }} npm run pack

      - name: Upload Node Azure Functions Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.apiName }}-build
          path: backend/functions/${{ needs.Build-Info.outputs.apiName }}.zip
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: [Build-Info, build-frontend, build-service]
    environment: ${{ needs.Build-Info.outputs.environment }}
    # TODO : remove true when done testing this on branch
    if: ((github.ref == 'refs/heads/main') )
    outputs:
      functionAppName: ${{ steps.azure-deploy.outputs.functionAppName }}
      webappName: ${{ steps.azure-deploy.outputs.webappName }}
    steps:
      - run: echo "Current git reference ${{ github.ref_name }}"

      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.Build-Info.outputs.azResourceGrpAppEncrypted }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgNetwork
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.Build-Info.outputs.azResourceGrpNetworkEncrypted }}

      - name: Deploy Azure resources
        id: azure-deploy
        run: |
          ./ops/helper-scripts/azure-deploy.sh \
            --show-what-if \
            --resourceGroup ${{ steps.rgApp.outputs.out }} \
            --file ./ops/cloud-deployment/ustp-cams.bicep \
            --parameters 'appName=${{ needs.Build-Info.outputs.stackName }} deployVnet=${{ needs.Build-Info.outputs.execVnetDeploy }} deployNetwork=true networkResourceGroupName=${{ steps.rgNetwork.outputs.out }} virtualNetworkName=${{ vars.AZ_NETWORK_VNET_NAME }} deployWebapp=true webappResourceGroupName=${{ steps.rgApp.outputs.out }} deployFunctions=true apiFunctionsResourceGroupName=${{ steps.rgApp.outputs.out }} sqlServerName=${{ secrets.AZ_SQL_SERVER_NAME }} sqlServerResourceGroupName=${{ secrets.AZURE_RG }} allowVeracodeScan=true'

          v1=$(cat ./outputs.json | jq -r .functionAppName.value)
          echo "functionAppName=${v1}" >> $GITHUB_OUTPUT

          v2=$(cat ./outputs.json | jq -r .webappName.value)
          echo "webappName=${v2}" >> $GITHUB_OUTPUT

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: [Build-Info, deploy]
    environment: ${{ needs.Build-Info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.Build-Info.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp
        run: ./ops/helper-scripts/az-app-deploy.sh --src ./${{ needs.Build-Info.outputs.webappName }}.tar -g ${{ steps.rgApp.outputs.out }} -n ${{ needs.deploy.outputs.webappName }}

  deploy-service:
    runs-on: ubuntu-latest
    needs: [Build-Info, deploy]
    environment: ${{ needs.Build-Info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.Build-Info.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy Azure Functions backend
        run: ./ops/helper-scripts/az-func-deploy.sh -g ${{ steps.rgApp.outputs.out }} -n ${{ needs.deploy.outputs.functionAppName }} --src ./${{ needs.Build-Info.outputs.apiName }}.zip --settings "MSSQL_HOST=${{ secrets.AZ_MSSQL_HOST }} MSSQL_DATABASE=${{ secrets.AZ_MSSQL_DATABASE }} MSSQL_USER=${{ secrets.AZ_MSSQL_USER }} MSSQL_PASS=${{ secrets.AZ_MSSQL_PASS }} MSSQL_ENCRYPT=${{ secrets.AZ_MSSQL_ENCRYPT }} MSSQL_TRUST_UNSIGNED_CERT=${{ secrets.AZ_MSSQL_TRUST_UNSIGNED_CERT }}"

  smoke-test-application:
    runs-on: ubuntu-latest
    needs: [Build-Info, deploy-webapp, deploy-service]
    environment: ${{ needs.Build-Info.outputs.environment }}
    env:
      webappName: ${{ needs.Build-Info.outputs.webappName }}
    steps:
      - name: Health check
        run: |
          sleep 15
          webStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" https://${{ needs.Build-Info.outputs.webappName }}.azurewebsites.net/api/healthcheck)
          sleep 5
          apiStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" https://${{ needs.Build-Info.outputs.apiName }}.azurewebsites.net/api/healthcheck)

          if [[ $webStatusCode = "200" && $apiStatusCode = "200" ]]; then
            exit 0
          else
            echo "Health check error. Response codes webStatusCode=$webStatusCode apiStatusCode=$apiStatusCode"
            exit 1
          fi
      - name: Veracode Prescan
        run: |
          echo "Still work in progress..."
