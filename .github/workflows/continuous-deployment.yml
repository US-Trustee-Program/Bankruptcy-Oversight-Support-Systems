name: Continuous Deployment

concurrency: ${{ github.ref }}

on: [push]

jobs:
  Build-Info:
    runs-on: ubuntu-latest
    environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main' || 'Develop' }}
    outputs:
      environment: ${{ vars.ENVIRONMENT }}
      stackName: ${{ steps.build-info.outputs.stackName }}
      webappName: ${{ steps.build-info.outputs.webappName }}
      apiName: ${{ steps.build-info.outputs.apiName }}
      execVnetDeploy: ${{ steps.build-info.outputs.execVnetDeploy }}
    steps:
      - name: Print build info
        id: build-info
        run: |
          echo "Printing build info"
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "Git SHA: ${{ github.sha }}"

          # Stack name used downstream to label build artifacts and Azure resources
          stackName="${{ vars.APP_NAME }}${{ vars.ENVIRONMENT != 'Main' && vars.DEV_SUFFIX || '' }}"
          echo "Stack Name: $stackName"
          echo "stackName=${stackName}" >> $GITHUB_OUTPUT

          # Expected build artifact naming
          webappName="${stackName}-webapp"
          echo "Webapp Artifact: $webappName"
          echo "webappName=${webappName}" >> $GITHUB_OUTPUT
          apiName="${stackName}-api"
          echo "Api Artifact: $apiName"
          echo "apiName=${apiName}" >> $GITHUB_OUTPUT

          # Default to false. Set to true to attempt to create a new virtual network
          execVnetDeploy=false
          echo "Execute virtual network deployment: ${execVnetDeploy}"
          echo "execVnetDeploy=${execVnetDeploy}" >> $GITHUB_OUTPUT

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: "--skip-sorting-imports --replace"

  build-frontend:
    defaults:
      run:
        working-directory: gui

    runs-on: ubuntu-latest
    needs: [ Build-Info ]
    environment: ${{ needs.Build-Info.outputs.environment }}

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: gui/package-lock.json

      - name: Execute Build
        run: |
          npm ci
          export REACT_APP_SERVER_HOSTNAME=${{ vars.REACT_APP_SERVER_HOSTNAME }}
          export REACT_APP_SERVER_PORT=${{ vars.REACT_APP_SERVER_PORT }}
          export REACT_APP_SERVER_PROTOCOL=${{ vars.REACT_APP_SERVER_PROTOCOL }}
          export REACT_APP_BASE_PATH=${{ vars.REACT_APP_BASE_PATH }}
          npm run build --if-present

      - name: Execute Test
        run: CI=true npm test

      - name: Package
        run: |
          mkdir artifacts
          tar -cvf artifacts/${{ needs.Build-Info.outputs.webappName }}.tar ./build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.webappName }}-build
          path: gui/artifacts/
          if-no-files-found: error
      
      - name: Veracode Upload And Scan Frontend
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: 'CAMS-Frontend'
          createprofile: false
          filepath: 'artifacts/${{ needs.Build-Info.outputs.webappName }}.tar'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'

  build-service:
    defaults:
      run:
        working-directory: functions/node

    runs-on: ubuntu-latest

    needs: [ Build-Info ]
    environment: ${{ needs.Build-Info.outputs.environment }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Execute Build
        run: |
          npm ci
          npm run build

      - name: Execute Tests
        run: npm run test

      - name: Package Application
        run: OUT=${{ needs.Build-Info.outputs.apiName }} npm run pack

      - name: Upload Node Azure Functions Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.apiName }}-build
          path: functions/node/${{ needs.Build-Info.outputs.apiName }}.zip
          if-no-files-found: error
      
      - name: Veracode Upload And Scan Backend
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: 'CAMS-Backend'
          createprofile: false
          filepath: 'functions/node/${{ needs.Build-Info.outputs.apiName }}.zip'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'

  deploy:
    runs-on: ubuntu-latest
    needs: [Build-Info, build-frontend, build-service]
    environment: ${{ needs.Build-Info.outputs.environment }}
    if: (github.ref == 'refs/heads/main')
    outputs:
      functionAppName: ${{ steps.azure-deploy.outputs.functionAppName }}
      webappName: ${{ steps.azure-deploy.outputs.webappName }}
    steps:
      - run: echo "Current git reference ${{ github.ref_name }}"

      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Azure resources
        id: azure-deploy
        run: |
          ./ops/script/azure-deploy.sh \
            --show-what-if \
            --resourceGroup ${{ secrets.AZ_APP_RG }} \
            --file ./ops/bicep/ustp-cams.bicep \
            --parameters 'appName=${{ needs.Build-Info.outputs.stackName }} deployVnet=${{ needs.Build-Info.outputs.execVnetDeploy }} deployNetwork=true networkResourceGroupName=${{ secrets.AZ_NETWORK_RG }} virtualNetworkName=${{ vars.AZ_NETWORK_VNET_NAME }} deployWebapp=true webappResourceGroupName=${{ secrets.AZ_APP_RG }} deployFunctions=true apiFunctionsResourceGroupName=${{ secrets.AZ_APP_RG }} sqlServerName=${{ secrets.AZ_SQL_SERVER_NAME }} sqlServerResourceGroupName=${{ secrets.AZURE_RG }}'

          v1=$(cat ./outputs.json | jq -r .functionAppName.value)
          echo "functionAppName=${v1}" >> $GITHUB_OUTPUT

          v2=$(cat ./outputs.json | jq -r .webappName.value)
          echo "webappName=${v2}" >> $GITHUB_OUTPUT

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: [ Build-Info, deploy ]
    environment: ${{ needs.Build-Info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure WebApp
        run: ./ops/script/az-app-deploy.sh --src ./${{ needs.Build-Info.outputs.webappName }}.tar -g ${{ secrets.AZ_APP_RG }} -n ${{ needs.deploy.outputs.webappName }}

  deploy-service:
    runs-on: ubuntu-latest
    needs: [ Build-Info, deploy ]
    environment: ${{ needs.Build-Info.outputs.environment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.Build-Info.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Azure Functions backend
        run: ./ops/script/az-func-deploy.sh -g ${{ secrets.AZ_APP_RG }} -n ${{ needs.deploy.outputs.functionAppName }} --src ./${{ needs.Build-Info.outputs.apiName }}.zip --settings "MSSQL_HOST=${{ secrets.AZ_MSSQL_HOST }} MSSQL_DATABASE=${{ secrets.AZ_MSSQL_DATABASE }} MSSQL_USER=${{ secrets.AZ_MSSQL_USER }} MSSQL_PASS=${{ secrets.AZ_MSSQL_PASS }} MSSQL_ENCRYPT=${{ secrets.AZ_MSSQL_ENCRYPT }} MSSQL_TRUST_UNSIGNED_CERT=${{ secrets.AZ_MSSQL_TRUST_UNSIGNED_CERT }}"
