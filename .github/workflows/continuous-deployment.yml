name: Continuous Deployment

on: [push]

jobs:
  build-frontend:
    defaults:
      run:
        working-directory: gui

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: gui/package-lock.json

      - run: npm ci
      - run: |
          export REACT_APP_SERVER_HOSTNAME=${{ vars.REACT_APP_SERVER_HOSTNAME }}
          export REACT_APP_SERVER_PORT=${{ vars.REACT_APP_SERVER_PORT }}
          export REACT_APP_SERVER_PROTOCOL=${{ vars.REACT_APP_SERVER_PROTOCOL }}
          npm run build --if-present
      - run: CI=true npm test

      - name: Archive the frontend build directory
        id: archive
        run: |
          mkdir artifacts
          tar -cvf artifacts/ustp-boss.tar ./build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ustp-boss
          path: gui/artifacts/
          if-no-files-found: error

  build-backend:
    defaults:
      run:
        working-directory: api

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - run: npm ci
      - run: CI=true npm test

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          login-server: ustpbossregistry.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_TOKEN }}

      - name: Build API Container and Publish to Registry
        run: az acr build -f Dockerfile -t ustpbossregistry.azurecr.io/ustp-boss-api-node -r ustpbossregistry.azurecr.io .

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    #if: github.ref == 'refs/heads/main' # TODO : This is for testing deployment on the branch
    steps:

      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check for existing virtual network resource
        id: check-vnet-resource
        run: |
          count=$(az network vnet list -g ustp-network-rg --query "length([?name=='${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-vnet'])")
          if [[ $count -eq 0 ]]; then
            echo "createVnet=true" >> "$GITHUB_OUTPUT"
          else
            echo "createVnet=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Init Virtual Network
        uses: azure/arm-deploy@v1
        id: vnet-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_NETWORK_RG }}
          template: ./ops/bicep/vnet-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} createVnet=${{ steps.check-vnet-resource.outputs.createVnet }}'

      - name: Run Bicep deploy
        uses: azure/arm-deploy@v1
        id: azure-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/azure-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}'
      
      - name: Run KeyVault Bicep deploy
        uses: azure/arm-deploy@v1
        id: keyvault-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/keyvault-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} readerGuid=${{ secrets.KEYVAULT_READER_ROLE_GUID }}'

      - name: Run Network Bicep deploy
        uses: azure/arm-deploy@v1
        id: network-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_NETWORK_RG }}
          template: ./ops/bicep/network-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} virtualNetworkName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-vnet'

      - name: Provision API Application Gateway
        uses: azure/arm-deploy@v1
        id: api-agw-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/appgateway-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} agwPrivateIP=${{ vars.REACT_APP_SERVER_HOSTNAME }} apiAgwSubnetId=${{ steps.network-deploy.outputs.outAgwSubnetId }}'

      - name: Provision Webapp Private Endpoint
        uses: azure/arm-deploy@v1
        id: webapp-private-endpoint-deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZ_APP_RG }}
          template: ./ops/bicep/private-endpoint-deploy.bicep
          parameters: 'appName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }} webApplicationId=${{ steps.azure-deploy.outputs.outwebApplicationId }} webappPrivateEndpointSubnetId=${{ steps.network-deploy.outputs.outWebappPrivateEndpointSubnetId }} webappPrivateEndpointVirtualNetworkId=${{ steps.network-deploy.outputs.outVnetId }}'

      - name: Run Post Bicep configurations
        run: |
          backendSubnetId=${{ steps.network-deploy.outputs.outBackendSubnetId }}
          count=$(az sql server vnet-rule list -g ${{ secrets.AZURE_RG }} --server ${{ secrets.AZ_SQL_SERVER_NAME }} -o json --query "length([?virtualNetworkSubnetId=='${backendSubnetId}'])")
          echo "Subnet match count ${count}"
          if [[ $count -eq 0 ]]; then
            echo "Creating new vnet-rule"
            az sql server vnet-rule create -s ${{ secrets.AZ_SQL_SERVER_NAME }} -n ${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}-vnet-rule -g ${{ secrets.AZURE_RG }} --subnet ${backendSubnetId}
          fi

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ustp-boss

      - name: Unarchive the build
        run: |
          tar -xf ustp-boss.tar

      - name: Deploy to Azure WebApp
        run: |
          cd build
          echo "Contents of build folder:"
          ls

          webappName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}
          
          az resource update -g ${{ secrets.AZ_APP_RG }} -n $webappName --resource-type "Microsoft.Web/sites" --set properties.publicNetworkAccess=Enabled
          az webapp up --html -n $webappName
          az webapp vnet-integration add -n $webappName -g ${{ secrets.AZ_APP_RG }} --vnet ${webappName}-vnet --subnet ${webappName}-vnet-webapp
          az resource update -g ${{ secrets.AZ_APP_RG }} -n $webappName --resource-type "Microsoft.Web/sites" --set properties.publicNetworkAccess=Disabled

      - name: Deploy Node API to Azure
        run: |
          webappName=${{ secrets.APP_NAME }}${{ secrets.DEV_SUFFIX }}
          count=$(az container list --query "length([?name=='${webappName}-api'])")
          apiIpAddress=
          if [[ $count -eq 0 ]]; then
            apiIpAddress=$(az container create \
              --os-type Linux \
              --resource-group ${{ secrets.AZ_APP_RG }} \
              --name ${webappName}-api \
              --image ustpbossregistry.azurecr.io/ustp-boss-api-node:latest \
              --ports 8080 \
              --vnet ${webappName}-vnet \
              --subnet ${webappName}-vnet-api-backend \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_TOKEN }} \
              --query ipAddress.ip \
              --secure-environment-variables 'MSSQL_HOST'='${{ secrets.AZ_MSSQL_HOST }}' 'MSSQL_DATABASE'='${{ secrets.AZ_MSSQL_DATABASE }}' 'MSSQL_USER'='${{ secrets.AZ_MSSQL_USER }}' 'MSSQL_ENCRYPT'='${{ secrets.AZ_MSSQL_ENCRYPT }}' 'MSSQL_TRUST_UNSIGNED_CERT'='${{ secrets.AZ_MSSQL_TRUST_UNSIGNED_CERT }}' 'MSSQL_PASS'='${{ secrets.AZ_MSSQL_PASS }}' \
              --output tsv)
          else
            echo "Restarting existing container group"
            az container restart --name ${webappName}-api -g ${{ secrets.AZ_APP_RG }}
            apiIpAddress=$(az container show -n ${webappName}-api -g ${{ secrets.AZ_APP_RG }} --query ipAddress.ip -o tsv)
          fi
          
          echo "Adding ips to backend pool: ${apiIpAddress}"
          az network application-gateway address-pool update \
            --resource-group ${{ secrets.AZ_APP_RG }} \
            --gateway-name ${webappName}-api-agw \
            --name ${webappName}-api-agw-https-backend-targets \
            --servers ${apiIpAddress}
