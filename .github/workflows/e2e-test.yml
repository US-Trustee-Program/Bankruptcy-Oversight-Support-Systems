name: Stand Alone E2E Test Runs

concurrency: ${{ github.ref }}-${{ github.workflow }}

on: workflow_dispatch

jobs:
  setup:
    name: Setup
    uses: ./.github/workflows/reusable-build-info.yml
    secrets: inherit # pragma: allowlist secret
    with:
      environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
      enableSlotDeployment: "true"
      enableBicepDeployment: "true"
      deployVnet: "false"
  build:
    name: Build
    needs: [setup]
    uses: ./.github/workflows/sub-build.yml
    secrets: inherit # pragma: allowlist secret
    with:
      nodeVersion: ${{ vars.NODE_VERSION }}
      apiName: ${{ needs.setup.outputs.apiName }}
      camsServerHostname: ${{ needs.setup.outputs.apiName }}.azurewebsites${{ vars.AZ_HOSTNAME_SUFFIX }}
      camsServerPort: ${{ vars.CAMS_SERVER_PORT }}
      camsServerProtocol: ${{ vars.CAMS_SERVER_PROTOCOL }}
      camsBasePath: ${{ vars.CAMS_BASE_PATH }}
      webappName: ${{ needs.setup.outputs.webappName }}
      environment: ${{ needs.setup.outputs.ghaEnvironment }}
      launchDarklyEnvironment: ${{ vars.CAMS_LAUNCH_DARKLY_ENV }}
  deploy-webapp-slot:
    runs-on: ubuntu-latest
    needs: [setup, build]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    steps:
      - uses: actions/checkout@main

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.webappName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Deploy to Azure WebApp Slot
        id: deploy-webapp-slot-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/slots/az-app-slot-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }} \
          --slotName ${{ needs.setup.outputs.slotName }}

      - name: Retry Deploy to Azure WebApp slot
        if: steps.deploy-webapp-slot-step.outcome != 'success'
        run: |
          sleep 30 &&
          ./ops/scripts/pipeline/slots/az-app-slot-deploy.sh \
          --src ./${{ needs.setup.outputs.webappName }}.zip \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.webappName }} \
          --slotName ${{ needs.setup.outputs.slotName }}

  deploy-service-slot:
    runs-on: ubuntu-latest
    needs: [setup, build]
    environment: ${{ needs.setup.outputs.ghaEnvironment }}
    steps:
      - uses: actions/checkout@main
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.apiName }}-build

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}

      - name: Set E2e CosmosDB Name for Node API
        run: |
          databaseName="${{secrets.AZ_COSMOS_DATABASE_NAME}}-e2e"
          if [[ ${{ needs.setup.outputs.environmentHash }} != 'DOES_NOT_EXIST' ]]; then
              databaseName="$databaseName-${{ needs.setup.outputs.environmentHash }}"
          fi

          echo "Database Name :${databaseName}"

          az functionapp config appsettings set -g "${{ steps.rgApp.outputs.out }}" -n "${{ needs.setup.outputs.apiName}}" --slot "${{ needs.setup.outputs.slotName }}" --slot-settings COSMOS_DATABASE_NAME="$databaseName"

      - name: Deploy Azure Functions slot backend
        id: deploy-backend-slot-step
        continue-on-error: true
        run: |
          ./ops/scripts/pipeline/slots/az-func-slot-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --slotName ${{ needs.setup.outputs.slotName }} \
          --settings "INFO_SHA=${{ github.sha }}"

      - name: Deploy Azure Functions slot backend
        id: deploy-backend-slot-retry
        if: steps.deploy-backend-slot-step.outcome != 'success'
        run: |
          ./ops/scripts/pipeline/slots/az-func-slot-deploy.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -n ${{ needs.setup.outputs.apiName }} \
          --src ./${{ needs.setup.outputs.apiName }}.zip \
          --slotName ${{ needs.setup.outputs.slotName }} \
          --settings "INFO_SHA=${{ github.sha }}"

  execute-e2e-test:
    needs: [setup, deploy-service-slot, deploy-webapp-slot]
    uses: ./.github/workflows/reusable-e2e.yml
    with:
      apiName: ${{ needs.setup.outputs.apiName }}
      slotName: ${{ needs.setup.outputs.slotName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      stackName: ${{ needs.setup.outputs.stackName }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      branchHashId: ${{ needs.setup.outputs.environmentHash }}
    secrets: inherit # pragma: allowlist secret
