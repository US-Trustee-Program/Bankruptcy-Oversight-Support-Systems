name: Stand Alone E2E Test Runs

concurrency: ${{ github.ref }}-${{ github.workflow }}

on: workflow_dispatch

jobs:
  setup:
    name: Setup
    uses: ./.github/workflows/reusable-build-info.yml
    secrets: inherit # pragma: allowlist secret
    with:
      environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
      enableSlotDeployment: "true"
      enableBicepDeployment: "true"
      deployVnet: "false"
  set-cosmos-db-name:
    needs: [setup]
    runs-on: ubuntu-latest
    environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
    steps:
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - name: Set E2e CosmosDB Name for Node API
        run: |
          databaseName="${{secrets.AZ_COSMOS_DATABASE_NAME}}-e2e"
          if [[ ${branch_hash_id} != 'DOES_NOT_EXIST' ]]; then
              databaseName="$databaseName-${{ needs.setup.outputs.environmentHash }}"
          fi

          echo "Database Name :${databaseName}"

          az functionapp config appsettings set -g "${{ steps.rgApp.outputs.out }}" -n "${{ needs.setup.outputs.apiName}}" --slot "${{ needs.setup.outputs.slotName }}" --slot-settings COSMOS_DATABASE_NAME="$databaseName"

  execute-e2e-test:
    needs: [setup, set-cosmos-db-name]
    uses: ./.github/workflows/reusable-e2e.yml
    with:
      apiName: ${{ needs.setup.outputs.apiName }}
      slotName: ${{ needs.setup.outputs.slotName }}
      webappName: ${{ needs.setup.outputs.webappName }}
      stackName: ${{ needs.setup.outputs.stackName }}
      azResourceGrpAppEncrypted: ${{ needs.setup.outputs.azResourceGrpAppEncrypted }}
      ghaEnvironment: ${{ needs.setup.outputs.ghaEnvironment }}
      branchHashId: ${{ needs.setup.outputs.environmentHash }}
    secrets: inherit # pragma: allowlist secret
