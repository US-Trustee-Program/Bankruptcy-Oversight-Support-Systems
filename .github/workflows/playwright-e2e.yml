name: Playwright E2E Tests

concurrency: ${{ github.ref }}-${{ github.workflow }}

on:
  workflow_dispatch:
    inputs:
      runSlotTests:
        description: "Input to run E2E tests"
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"
jobs:
  build-info:
    runs-on: ubuntu-latest
    environment: ${{ endsWith(github.ref,'refs/heads/main') && 'Main-Gov' || 'Develop' }}
    outputs:
      environment: ${{ vars.ENVIRONMENT }}
      stackName: ${{ steps.build-info.outputs.stackName }}
      webappName: ${{ steps.build-info.outputs.webappName }}
      apiName: ${{ steps.build-info.outputs.apiName }}
      azResourceGrpAppEncrypted: ${{ steps.rgApp.outputs.out }}
      environmentHash: ${{ steps.check-env.outputs.environmentHash }}
      slotName: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check environment
        id: check-env
        if: ${{ vars.ENVIRONMENT != 'Main-Gov' }} # Generate deterministic hash to append to resource group names
        run: |
          hash=$(echo -n ${{ github.ref_name }} | openssl sha256 | awk '{print $2}')
          shortHash="${hash:0:6}"
          echo "environmentHash=${shortHash}" >> $GITHUB_OUTPUT
          echo "resourceGroupSuffix=-${shortHash}" >> $GITHUB_OUTPUT
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - name: Print build info
        id: build-info
        run: |
          echo "Printing build info"
          echo "Environment: ${{ vars.ENVIRONMENT }}"
          echo "environment=${{ vars.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "Target Azure Cloud: ${{ vars.AZURE_ENVIRONMENT }}"
          echo "Git SHA: ${{ github.sha }}"
          # Generate resource group name(s)
          echo "Env Hash: ${{ steps.check-env.outputs.environmentHash }}"
          resourceGroupSuffix=${{ steps.check-env.outputs.resourceGroupSuffix || '' }}
          echo "Resource group appended with the following: ${resourceGroupSuffix}"
          echo "azResourceGrpApp=${{ secrets.AZ_APP_RG }}${resourceGroupSuffix}" >> $GITHUB_OUTPUT
          stackName=$(ops/scripts/pipeline/generate-stackname.sh ${{ vars.ENVIRONMENT }} ${{ vars.APP_NAME }} ${{ vars.DEV_SUFFIX }} ${{ github.ref_name }})
          echo "Stack Name: $stackName"
          echo "stackName=${stackName}" >> $GITHUB_OUTPUT

          # Expected build artifact naming
          webappName="${stackName}-webapp"
          echo "Webapp Artifact: $webappName"
          echo "webappName=${webappName}" >> $GITHUB_OUTPUT
          apiName="${stackName}-node-api"
          echo "Api Artifact: $apiName"
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: encode
          in: ${{ steps.build-info.outputs.azResourceGrpApp }}
  enable-access:
    runs-on: ubuntu-latest
    needs: [build-info]
    environment: ${{ needs.build-info.outputs.environment }}
    env:
      webappName: ${{ needs.build-info.outputs.webappName }}
      apiName: ${{ needs.build-info.outputs.apiName }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ vars.AZURE_ENVIRONMENT }}
      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.PGP_SIGNING_PASSPHRASE }}
          op: decode
          in: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}
      - name: Enable production slot access
        if: ${{ inputs.runSlotTests == 'false' }}
        run: |
          az webapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
          az functionapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
      - name: Enable staging slot access
        if: ${{ inputs.runSlotTests == 'true' }}
        run: |
          az webapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.webappName }} --slot ${{ needs.build-info.outputs.slotName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true
          az functionapp config access-restriction add --resource-group ${{ steps.rgApp.outputs.out }} --name ${{ env.apiName }} --slot ${{ needs.build-info.outputs.slotName }} --rule-name AllowAll --action Allow --ip-address 0.0.0.0/0 --priority 100 1>/dev/null || true

  execute-e2e-tests:
    needs: [build-info]
    uses: ./.github/workflows/reusable-e2e.yml
    with:
      apiName: ${{ needs.build-info.outputs.apiName }}
      slotName: ${{ needs.build-info.outputs.slotName }}
      webappName: ${{ needs.build-info.outputs.webappName }}
      stackName: ${{ needs.build-info.outputs.stackName }}
      azResourceGrpAppEncrypted: ${{ needs.build-info.outputs.azResourceGrpAppEncrypted }}
      ghaEnvironment: ${{ needs.build-info.outputs.environment }}
      branchHashId: ${{ needs.build-info.outputs.environmentHash }}
    secrets: inherit # pragma: allowlist secret
