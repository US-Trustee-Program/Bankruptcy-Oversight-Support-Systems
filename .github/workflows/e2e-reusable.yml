name: integration-test

on:
  workflow_call:
    inputs:
      apiName:
        required: true
        type: string
      slotName:
        required: true
        type: string
      webappName:
        required: true
        type: string
      stackName:
        required: true
        type: string
      azResourceGrpAppEncrypted:
        required: true
        type: string
      azureEnvironment:
        required: true
        type: string
      azureHostnameSuffix:
        default: '.us'
        required: false
        type: string
      deploymentEnvironment:
        required: true
        type: string
      branchHashId:
        required: true
        type: string
    secrets:
      azCredentials:
        required: true
      pgpSigningPassphrase:
        required: true
      azDatabaseResourceGroup:
        required: true
      azCosmosAccountName:
        required: true
      azCosmosDatabaseName:
        required: true

jobs:
  playwright-e2e-test:
    runs-on: ubuntu-latest
    env:
      priority: 201
    defaults:
      run:
        working-directory: test/e2e
    steps:
      - name: Get source code
        uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.azCredentials }}
          environment: ${{ inputs.azureEnvironment }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: rgApp
        with:
          secret: ${{ secrets.pgpSigningPassphrase }}
          op: decode
          in: ${{ inputs.azResourceGrpAppEncrypted }}

      - name: Enable GHA runner access
        run: |
          ../../ops/scripts/pipeline/dev-add-allowed-ip.sh \
          -g ${{ steps.rgApp.outputs.out }} \
          -s ${{ inputs.stackName }} \
          -p ${{ env.priority }} \
          --is-cicd

      - name: Smoke test application
        run: |
          webStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ inputs.webappName }}.azurewebsites${{ inputs.azureHostnameSuffix }}?x-ms-routing-name=${{ inputs.slotName }} )
          apiStatusCode=$(curl -q -o -I -L -s -w "%{http_code}" --retry 5 --retry-delay 60 --retry-all-errors -f https://${{ inputs.apiName }}.azurewebsites${{ inputs.azureHostnameSuffix }}/api/healthcheck?x-ms-routing-name=${{ inputs.slotName }} )

          if [[ $webStatusCode = "200" && $apiStatusCode = "200" ]]; then
            exit 0
          else
            echo "Health check error. Response codes webStatusCode=$webStatusCode apiStatusCode=$apiStatusCode"
            exit 1
          fi

      - name: Seed e2e database
        run: |
          curl -v -d '{"txIdOverride": '0'}' -H "Content-Type: application/json" https://${{ inputs.apiName }}.azurewebsites${{ inputs.azureHostnameSuffix }}/api/orders-sync?x-ms-routing-name=${{ inputs.slotName }}

      - name: Install Node dependencies
        run: |
          npm ci
          npx playwright install chromium msedge

      - name: Run the test
        run: |
          TARGET_HOST=https://${{ inputs.webappName }}.azurewebsites${{ inputs.azureHostnameSuffix }} npx playwright test --reporter=list,html

      - name: Upload report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: test/e2e/playwright-report/
          retention-days: 30

      - name: Disable GHA runner access
        if: always()
        run: |
          name="gha-${{ env.priority }}-${{ inputs.stackName }}"
          ../../ops/scripts/pipeline/dev-rm-allowed-ip.sh ${{ steps.rgApp.outputs.out }} ${{ inputs.stackName }} ${name:0:32}

      - name: Clean up e2e test database
        if: always()
        run: |
          e2eDatabaseName="${{ secrets.azCosmosDatabaseName }}-e2e"
          if [[ ${{ inputs.deploymentEnvironment }} != "Main-Gov" ]]; then
            echo "Adding suffix to database name"
            e2eDatabaseName="${e2eDatabaseName}-${{ inputs.branchHashId }}"
          fi
          az cosmosdb sql database delete \
          --account-name ${{ secrets.azCosmosAccountName }} \
          --name "${e2eDatabaseName}" \
          --resource-group ${{ secrets.azDatabaseResourceGroup }} \
          --yes
