name: NPM Package Updates

on:
  # Disabled in favor of Renovate Bot - keeping for manual fallback
  # schedule:
  #   - cron: '0 10 * * 3'
  #     # Every Wednesday morning at 5 ET
  workflow_dispatch:

jobs:
  update-all:
    name: Update all NPM projects
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}
          cache: 'npm'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Import GPG
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6.3.0
        with:
          gpg_private_key: ${{ secrets.BOT_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_PASSPHRASE }}
          git_config_global: true
          git_commit_gpgsign: true
          git_user_signingkey: true

      - name: Update Dependencies
        id: update-deps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        run: |
          # Run the dependency update script and capture output
          SCRIPT_OUTPUT=$(./ops/scripts/utility/update-dependencies.sh -c 2>&1)
          echo "$SCRIPT_OUTPUT"

          # Parse updated_count from JSON output
          JSON_OUTPUT=$(echo "$SCRIPT_OUTPUT" | grep -E '^\{.*"updated_count".*\}$' | tail -1)
          UPDATED_COUNT=$(echo "$JSON_OUTPUT" | jq -r '.updated_count')
          echo "updated_count=$UPDATED_COUNT" >> $GITHUB_OUTPUT

          # Check if manifest file was created
          if [ -f "dependency-update-manifest.md" ]; then
            echo "manifest_exists=true" >> $GITHUB_OUTPUT
            echo "Manifest file found at: $(pwd)/dependency-update-manifest.md"
          else
            echo "manifest_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: Manifest file not found at $(pwd)/dependency-update-manifest.md"
            ls -la | grep -E "(dependency|manifest)" || echo "No manifest-related files found"
          fi

      - name: Check for Changes and Create PR
        id: create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there are actual changes by comparing with the remote main branch
          # First fetch the latest main to ensure we have the right reference
          git fetch origin main

          # Check if there are commits on the current branch that aren't on main
          COMMIT_COUNT=$(git rev-list --count origin/main..HEAD)
          echo "Commits ahead of main: $COMMIT_COUNT"

          # If we have commits ahead of main, they must be our dependency updates
          if [ "$COMMIT_COUNT" -gt 0 ]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT

            # Create PR with manifest content if available
            if [ "${{ steps.update-deps.outputs.manifest_exists }}" = "true" ]; then
              echo "Creating PR with manifest content..."
              gh pr create \
                --title "Automated NPM Package Updates" \
                --body-file "dependency-update-manifest.md" \
                --head "dependency-updates-auto" \
                --base "main"
            else
              echo "Creating PR with default message..."
              gh pr create \
                --title "Automated NPM Package Updates" \
                --body "Automated dependency updates completed. Updated ${{ steps.update-deps.outputs.updated_count }} packages." \
                --head "dependency-updates-auto" \
                --base "main"
            fi
            echo "pr_created=true" >> $GITHUB_OUTPUT
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "pr_created=false" >> $GITHUB_OUTPUT
            echo "No commits found ahead of main - skipping PR creation"
          fi

      - name: Audit
        if: steps.create-pr.outputs.changes_made == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./ops/scripts/utility/audit.sh -c

      - name: Trigger Continuous Deployment
        if: steps.create-pr.outputs.pr_created == 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: continuous-deployment.yml
          repo: US-Trustee-Program/Bankruptcy-Oversight-Support-Systems
          ref: 'refs/heads/dependency-updates-auto'
          inputs: '{"deployBranch": "true", "enableBicepDeployment": "true"}'
